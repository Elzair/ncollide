var searchIndex = [{ty:"mod",name:"",path:"ncollide3df32",desc:"ncollide  [![Build Status](https://travis-ci.org/sebcrozet/ncollide.png?branch=master)](https://travis-ci.org/sebcrozet/ncollide)\n========"},{ty:"mod",name:"bounding_volume",path:"ncollide3df32",desc:"Bounding volumes."},{ty:"struct",name:"AABB",path:"ncollide3df32::bounding_volume",desc:"An Axis Aligned Bounding Box."},{ty:"struct",name:"WithAABB",path:"ncollide3df32::bounding_volume",desc:"Wrapper which implements `HasBoundingVolume<Matrix, AABB>` for objects implementing `HasAABB`."},{ty:"fn",name:"implicit_shape_aabb",path:"ncollide3df32::bounding_volume",desc:"Builds the AABB of an implicit shape."},{ty:"fn",name:"ball_aabb",path:"ncollide3df32::bounding_volume",desc:"Computes the Axis-Aligned Bounding Box of a ball."},{ty:"trait",name:"HasAABB",path:"ncollide3df32::bounding_volume",desc:"Traits of objects that can be approximated by an AABB."},{ty:"tymethod",name:"aabb",path:"ncollide3df32::bounding_volume",desc:"The objectâ€™s AABB.",parent:'39'},{ty:"trait",name:"HasBoundingVolume",path:"ncollide3df32::bounding_volume",desc:"Traits of objects having a bounding volume."},{ty:"tymethod",name:"bounding_volume",path:"ncollide3df32::bounding_volume",desc:"The object bounding volume.",parent:'1321'},{ty:"trait",name:"BoundingVolume",path:"ncollide3df32::bounding_volume",desc:"Trait of bounding volumes."},{ty:"tymethod",name:"intersects",path:"ncollide3df32::bounding_volume",desc:"Checks if this bounding volume intersect with another one.",parent:'1330'},{ty:"tymethod",name:"contains",path:"ncollide3df32::bounding_volume",desc:"Checks if this bounding volume contains another one.",parent:'1330'},{ty:"tymethod",name:"merge",path:"ncollide3df32::bounding_volume",desc:"Merges this bounding volume with another one. The merge is done in-place.",parent:'1330'},{ty:"tymethod",name:"merged",path:"ncollide3df32::bounding_volume",desc:"Merges this bounding volume with another one.",parent:'1330'},{ty:"trait",name:"LooseBoundingVolume",path:"ncollide3df32::bounding_volume",desc:"Trait of loose bounding volume."},{ty:"tymethod",name:"loosen",path:"ncollide3df32::bounding_volume",desc:"Enlarges this bounding volume.",parent:'1374'},{ty:"tymethod",name:"loosened",path:"ncollide3df32::bounding_volume",desc:"Creates a new, enlarged version, of this bounding volume.",parent:'1374'},{ty:"mod",name:"geom",path:"ncollide3df32",desc:"Geometric primitives."},{ty:"struct",name:"Ball",path:"ncollide3df32::geom",desc:"A Ball geometry."},{ty:"struct",name:"Plane",path:"ncollide3df32::geom",desc:"Implicit description of a plane."},{ty:"structfield",name:"normal",path:"ncollide3df32::geom",desc:"The plane normal.",parent:'2371'},{ty:"struct",name:"Box",path:"ncollide3df32::geom",desc:"Geometry of a box."},{ty:"struct",name:"Capsule",path:"ncollide3df32::geom",desc:"Implicit description of a capsule geometry with its principal axis aligned with the `x` axis."},{ty:"struct",name:"Cone",path:"ncollide3df32::geom",desc:"Implicit description of a cylinder geometry with its principal axis aligned with the `x` axis."},{ty:"struct",name:"Cylinder",path:"ncollide3df32::geom",desc:"Implicit description of a cylinder geometry with its principal axis aligned with the `x` axis."},{ty:"struct",name:"Convex",path:"ncollide3df32::geom",desc:"Set of point assumed to form a convex polytope."},{ty:"struct",name:"MinkowskiSum",path:"ncollide3df32::geom",desc:"Implicit representation of the Minkowski sum of two geometries."},{ty:"struct",name:"AnnotatedMinkowskiSum",path:"ncollide3df32::geom",desc:"Same as the MinkowskiSum but with a support mapping which keeps track of the\noriginal supports points from the two wrapped geometries."},{ty:"struct",name:"Reflection",path:"ncollide3df32::geom",desc:"Implicit representation of the reflection of a geometry."},{ty:"struct",name:"Compound",path:"ncollide3df32::geom",desc:"A compound geometry with an aabb bounding volume."},{ty:"struct",name:"GeomWithMargin",path:"ncollide3df32::geom",desc:"Extends the wrapped geometry with its margin."},{ty:"struct",name:"Mesh",path:"ncollide3df32::geom",desc:"Geometry commonly known as a 2d line strip or a 3d triangle mesh."},{ty:"struct",name:"Segment",path:"ncollide3df32::geom",desc:"A segment geometry."},{ty:"struct",name:"Triangle",path:"ncollide3df32::geom",desc:"A triangle geometry."},{ty:"typedef",name:"MeshPrimitive",path:"ncollide3df32::geom",desc:""},{ty:"trait",name:"MeshElement",path:"ncollide3df32::geom",desc:"Trait implemented by elements usable on the Mesh."},{ty:"tymethod",name:"nvertices",path:"ncollide3df32::geom",desc:"The number of vertices of this mesh element.",parent:'8346'},{ty:"tymethod",name:"new_with_vertices_and_indices",path:"ncollide3df32::geom",desc:"Creates a new mesh element from a set of vertices and indices and the margin.",parent:'8346'},{ty:"trait",name:"Geom",path:"ncollide3df32::geom",desc:"Trait implemented by each geometry supported by `ncollide`."},{ty:"tymethod",name:"duplicate",path:"ncollide3df32::geom",desc:"Duplicates (clones) this geometry.",parent:'1842'},{ty:"trait",name:"ConcaveGeom",path:"ncollide3df32::geom",desc:"Trait implemented by concave, composite geometries supported by `ncollide`."},{ty:"tymethod",name:"map_part_at",path:"ncollide3df32::geom",desc:"Applies a function to each sub-geometry of this concave geometry.",parent:'1854'},{ty:"tymethod",name:"map_transformed_part_at",path:"ncollide3df32::geom",desc:"Applies a transformation matrix and a function to each sub-geometry of this concave\ngeometry.",parent:'1854'},{ty:"tymethod",name:"approx_interferences_with_aabb",path:"ncollide3df32::geom",desc:"Computes the indices of every sub-geometry which might intersect a given AABB.",parent:'1854'},{ty:"tymethod",name:"approx_interferences_with_ray",path:"ncollide3df32::geom",desc:"Computes the indices of every sub-geometry which might intersect a given Ray.",parent:'1854'},{ty:"tymethod",name:"aabb_at",path:"ncollide3df32::geom",desc:"Gets the AABB of the geometry identified by the index `i`.",parent:'1854'},{ty:"mod",name:"ray",path:"ncollide3df32",desc:"Ray casting utilities."},{ty:"struct",name:"Ray",path:"ncollide3df32::ray",desc:"A Ray."},{ty:"structfield",name:"orig",path:"ncollide3df32::ray",desc:"Starting point of the ray.",parent:'9328'},{ty:"structfield",name:"dir",path:"ncollide3df32::ray",desc:"Direction of the ray.",parent:'9328'},{ty:"struct",name:"RayIntersection",path:"ncollide3df32::ray",desc:"Structure containing the result of a successful ray cast."},{ty:"structfield",name:"toi",path:"ncollide3df32::ray",desc:"The time of impact of the ray with the object.  The exact contact point can be computed\nwith: `orig + dir * toi` where `orig` is the origin of the ray; `dir` is its direction and\n`toi` is the value of this field.",parent:'9594'},{ty:"structfield",name:"normal",path:"ncollide3df32::ray",desc:"The normal at the intersection point.",parent:'9594'},{ty:"structfield",name:"uvs",path:"ncollide3df32::ray",desc:"The textures coordinates at the intersection point.  This is an `Option` because some shape\ndo not support texture coordinates.",parent:'9594'},{ty:"fn",name:"plane_toi_with_ray",path:"ncollide3df32::ray",desc:"Computes the toi of a ray with a plane described by its center and normal."},{ty:"fn",name:"implicit_toi_and_normal_with_ray",path:"ncollide3df32::ray",desc:"Cast a ray on a geometry using the GJK algorithm."},{ty:"fn",name:"ball_toi_with_ray",path:"ncollide3df32::ray",desc:"Computes the time of impact of a ray on a ball."},{ty:"fn",name:"triangle_ray_intersection",path:"ncollide3df32::ray",desc:"Computes the intersection between a triangle and a ray."},{ty:"trait",name:"RayCast",path:"ncollide3df32::ray",desc:"Traits of objects which can be tested for intersection with a ray."},{ty:"method",name:"toi_with_ray",path:"ncollide3df32::ray",desc:"Computes the time of impact between this geometry and a ray",parent:'9647'},{ty:"tymethod",name:"toi_and_normal_with_ray",path:"ncollide3df32::ray",desc:"Computes the intersection point between this geometry and a ray.",parent:'9647'},{ty:"method",name:"toi_and_normal_and_uv_with_ray",path:"ncollide3df32::ray",desc:"Computes the intersection point and normal between this geometry and a ray.",parent:'9647'},{ty:"method",name:"intersects_ray",path:"ncollide3df32::ray",desc:"Tests whether a ray intersects this geometry.",parent:'9647'},{ty:"method",name:"toi_with_transform_and_ray",path:"ncollide3df32::ray",desc:"Computes the time of impact between this transform geometry and a ray.",parent:'9647'},{ty:"method",name:"toi_and_normal_with_transform_and_ray",path:"ncollide3df32::ray",desc:"Computes the time of impact, and normal between this transformed geometry and a ray.",parent:'9647'},{ty:"method",name:"toi_and_normal_and_uv_with_transform_and_ray",path:"ncollide3df32::ray",desc:"Computes time of impact, normal, and texture coordinates (uv) between this transformed\ngeometry and a ray.",parent:'9647'},{ty:"method",name:"intersects_with_transform_and_ray",path:"ncollide3df32::ray",desc:"Tests whether a ray intersects this transformed geometry.",parent:'9647'},{ty:"mod",name:"narrow",path:"ncollide3df32",desc:"Narrow phases."},{ty:"struct",name:"Empty",path:"ncollide3df32::narrow",desc:"A collision detector that does nothing."},{ty:"struct",name:"BallBall",path:"ncollide3df32::narrow",desc:"Collision detector between two balls."},{ty:"struct",name:"PlaneImplicit",path:"ncollide3df32::narrow",desc:"Collision detector between a plane and a geometry implementing the `Implicit` trait."},{ty:"struct",name:"ImplicitPlane",path:"ncollide3df32::narrow",desc:"Collision detector between a plane and a geometry implementing the `Implicit` trait."},{ty:"struct",name:"ImplicitImplicit",path:"ncollide3df32::narrow",desc:"Persistent collision detector between two shapes having a support mapping function."},{ty:"struct",name:"IncrementalContactManifoldGenerator",path:"ncollide3df32::narrow",desc:"Contact manifold generator which keeps track of several contacts."},{ty:"struct",name:"OneShotContactManifoldGenerator",path:"ncollide3df32::narrow",desc:"Contact manifold generator producing a full manifold at the first update."},{ty:"struct",name:"GeomGeomDispatcher",path:"ncollide3df32::narrow",desc:"Collision dispatcher between two `~Geom`."},{ty:"struct",name:"ConcaveGeomGeom",path:"ncollide3df32::narrow",desc:"Collision detector between a concave geometry and another geometry."},{ty:"struct",name:"GeomConcaveGeom",path:"ncollide3df32::narrow",desc:"Collision detector between a geometry and a concave geometry."},{ty:"struct",name:"ConcaveGeomGeomFactory",path:"ncollide3df32::narrow",desc:"Structure implementing `CollisionDetectorFactory` in order to create a new `ConcaveGeomGeom`\ncollision detector."},{ty:"struct",name:"GeomConcaveGeomFactory",path:"ncollide3df32::narrow",desc:"Structure implementing `CollisionDetectorFactory` in order to create a new `GeomConcaveGeom`\ncollision detector."},{ty:"mod",name:"toi",path:"ncollide3df32::narrow",desc:"Functions to compute the time of impact between two geometries."},{ty:"fn",name:"toi",path:"ncollide3df32::narrow::toi",desc:"Computes the Time Of Impact of two balls."},{ty:"fn",name:"toi",path:"ncollide3df32::narrow::toi",desc:"Computes the Time Of Impact of a geometry and a plane."},{ty:"fn",name:"toi",path:"ncollide3df32::narrow::toi",desc:"Computes the Time Of Impact of two geometries."},{ty:"mod",name:"collide",path:"ncollide3df32::narrow",desc:"Functions to compute one contact point between two geometries."},{ty:"fn",name:"collide",path:"ncollide3df32::narrow::collide",desc:"Computes the contact point between two balls."},{ty:"fn",name:"collide",path:"ncollide3df32::narrow::collide",desc:"Same as `update_collide_plane_implicit_shape` but the existing collision or `None`."},{ty:"fn",name:"collide",path:"ncollide3df32::narrow::collide",desc:"Computes a contact point between two implicit geometries."},{ty:"mod",name:"closest_points",path:"ncollide3df32::narrow",desc:"Functions to compute the closest points between two geometries."},{ty:"fn",name:"closest_points",path:"ncollide3df32::narrow::closest_points",desc:"Computes the closest points between two balls."},{ty:"mod",name:"algorithm",path:"ncollide3df32::narrow",desc:"Algorithms needed for distance and penetration depth computation."},{ty:"mod",name:"simplex",path:"ncollide3df32::narrow::algorithm",desc:"Abstract definition of a simplex usable by the GJK algorithm."},{ty:"trait",name:"Simplex",path:"ncollide3df32::narrow::algorithm::simplex",desc:"Trait of a simplex usable by the GJK algorithm."},{ty:"tymethod",name:"reset",path:"ncollide3df32::narrow::algorithm::simplex",desc:"Replace the point of the simplex by a single one. The simplex is reduced to be\n0-dimensional.",parent:'20088'},{ty:"tymethod",name:"translate_by",path:"ncollide3df32::narrow::algorithm::simplex",desc:"Translates each point of this simplex.",parent:'20088'},{ty:"tymethod",name:"add_point",path:"ncollide3df32::narrow::algorithm::simplex",desc:"Adds a point to the simplex.",parent:'20088'},{ty:"tymethod",name:"project_origin_and_reduce",path:"ncollide3df32::narrow::algorithm::simplex",desc:"Project the origin on the simplex and remove any sub-simplex which does not contain the\nprojection.",parent:'20088'},{ty:"tymethod",name:"project_origin",path:"ncollide3df32::narrow::algorithm::simplex",desc:"Projection the origin on the simplex. The simplex itself in unchanged, although it is mutable\nfor optimization purpose.",parent:'20088'},{ty:"tymethod",name:"contains_point",path:"ncollide3df32::narrow::algorithm::simplex",desc:"Checks whether a given point is already part of the simplex points.",parent:'20088'},{ty:"tymethod",name:"dimension",path:"ncollide3df32::narrow::algorithm::simplex",desc:"Dimension of the simplex. A simplex with `n` must be a `n - 1`-dimensional simplex.",parent:'20088'},{ty:"tymethod",name:"max_sq_len",path:"ncollide3df32::narrow::algorithm::simplex",desc:"The maximum among the simplex point squared lengths.",parent:'20088'},{ty:"mod",name:"johnson_simplex",path:"ncollide3df32::narrow::algorithm",desc:"Simplex using the Johnson subalgorithm to compute the projection of the origin on the simplex."},{ty:"struct",name:"JohnsonSimplex",path:"ncollide3df32::narrow::algorithm::johnson_simplex",desc:"Simplex using the Johnson subalgorithm to compute the projection of the origin on the simplex."},{ty:"struct",name:"RecursionTemplate",path:"ncollide3df32::narrow::algorithm::johnson_simplex",desc:"Set of indices to explain to the JohnsonSimplex how to do its work.\nBuilding this is very time consuming, and thus should be shared between all instances of the\nJohnson simplex."},{ty:"method",name:"clone",path:"ncollide3df32::narrow::algorithm::johnson_simplex",desc:"",parent:'20178'},{ty:"method",name:"decode",path:"ncollide3df32::narrow::algorithm::johnson_simplex",desc:"",parent:'20244'},{ty:"method",name:"encode",path:"ncollide3df32::narrow::algorithm::johnson_simplex",desc:"",parent:'20244'},{ty:"method",name:"clone",path:"ncollide3df32::narrow::algorithm::johnson_simplex",desc:"",parent:'20244'},{ty:"method",name:"eq",path:"ncollide3df32::narrow::algorithm::johnson_simplex",desc:"",parent:'20244'},{ty:"method",name:"ne",path:"ncollide3df32::narrow::algorithm::johnson_simplex",desc:"",parent:'20244'},{ty:"method",name:"new",path:"ncollide3df32::narrow::algorithm::johnson_simplex",desc:"Creates a new set of Recursion simplex sharable between any Johnson simplex having a\ndimension inferior or equal to `dim`.",parent:'20244'},{ty:"method",name:"new",path:"ncollide3df32::narrow::algorithm::johnson_simplex",desc:"Creates a new, empty, Johnson simplex.",parent:'20178'},{ty:"method",name:"new_w_tls",path:"ncollide3df32::narrow::algorithm::johnson_simplex",desc:"Creates a new, empty Johnson simplex. The recursion template uses the thread-local one.",parent:'20178'},{ty:"method",name:"reset",path:"ncollide3df32::narrow::algorithm::johnson_simplex",desc:"",parent:'20178'},{ty:"method",name:"dimension",path:"ncollide3df32::narrow::algorithm::johnson_simplex",desc:"",parent:'20178'},{ty:"method",name:"max_sq_len",path:"ncollide3df32::narrow::algorithm::johnson_simplex",desc:"",parent:'20178'},{ty:"method",name:"contains_point",path:"ncollide3df32::narrow::algorithm::johnson_simplex",desc:"",parent:'20178'},{ty:"method",name:"add_point",path:"ncollide3df32::narrow::algorithm::johnson_simplex",desc:"",parent:'20178'},{ty:"method",name:"project_origin_and_reduce",path:"ncollide3df32::narrow::algorithm::johnson_simplex",desc:"",parent:'20178'},{ty:"method",name:"project_origin",path:"ncollide3df32::narrow::algorithm::johnson_simplex",desc:"",parent:'20178'},{ty:"method",name:"translate_by",path:"ncollide3df32::narrow::algorithm::johnson_simplex",desc:"",parent:'20178'},{ty:"mod",name:"gjk",path:"ncollide3df32::narrow::algorithm",desc:"The Gilbertâ€“Johnsonâ€“Keerthi distance algorithm."},{ty:"enum",name:"GJKResult",path:"ncollide3df32::narrow::algorithm::gjk",desc:"Results of the GJK algorithm."},{ty:"variant",name:"Intersection",path:"ncollide3df32::narrow::algorithm::gjk",desc:"Result of the GJK algorithm when the origin is inside of the polytope.",parent:'22973'},{ty:"variant",name:"Projection",path:"ncollide3df32::narrow::algorithm::gjk",desc:"Result of the GJK algorithm when a projection of the origin on the polytope is found.",parent:'22973'},{ty:"variant",name:"NoIntersection",path:"ncollide3df32::narrow::algorithm::gjk",desc:"Result of the GJK algorithm when the origin is to far away from the polytope.",parent:'22973'},{ty:"fn",name:"closest_points",path:"ncollide3df32::narrow::algorithm::gjk",desc:"Computes the closest points between two convex geometries unsing the GJK algorithm."},{ty:"fn",name:"closest_points_without_margin",path:"ncollide3df32::narrow::algorithm::gjk",desc:"Computes the closest points between two convex geometries without their margins unsing the GJK\nalgorithm."},{ty:"fn",name:"closest_points_without_margin_with_max_dist",path:"ncollide3df32::narrow::algorithm::gjk",desc:"Computes the closest points between two convex geometries without their margins unsing the GJK\nalgorithm."},{ty:"fn",name:"project_origin",path:"ncollide3df32::narrow::algorithm::gjk",desc:"Projects the origin on a geometry unsing the GJK algorithm."},{ty:"fn",name:"project_origin_with_max_dist",path:"ncollide3df32::narrow::algorithm::gjk",desc:"Projects the origin on a geometry using the Separating Axis GJK algorithm.\nThe algorithm will stop as soon as the polytope can be proven to be at least `max_dist` away\nfrom the origin."},{ty:"method",name:"clone",path:"ncollide3df32::narrow::algorithm::gjk",desc:"",parent:'22973'},{ty:"method",name:"decode",path:"ncollide3df32::narrow::algorithm::gjk",desc:"",parent:'22973'},{ty:"method",name:"encode",path:"ncollide3df32::narrow::algorithm::gjk",desc:"",parent:'22973'},{ty:"mod",name:"minkowski_sampling",path:"ncollide3df32::narrow::algorithm",desc:"Penetration depth computation algorithm approximating the Minkowskis sum."},{ty:"fn",name:"closest_points",path:"ncollide3df32::narrow::algorithm::minkowski_sampling",desc:"Computes the closest points between two implicit inter-penetrating shapes. Returns None if the\nshapes are not in penetration. This can be used as a fallback algorithm for the GJK algorithm."},{ty:"trait",name:"CollisionDetector",path:"ncollide3df32::narrow",desc:"Trait of the algorithms executed during the so-called Narrow Phase."},{ty:"tymethod",name:"update",path:"ncollide3df32::narrow",desc:"Runs the collision detection on two objects. It is assumed that the same\ncollision detector (the same structure) is always used with the same\npair of object.",parent:'13674'},{ty:"tymethod",name:"num_colls",path:"ncollide3df32::narrow",desc:"The number of collision detected during the last update.",parent:'13674'},{ty:"tymethod",name:"colls",path:"ncollide3df32::narrow",desc:"Collects the collisions detected during the last update.",parent:'13674'},{ty:"tymethod",name:"toi",path:"ncollide3df32::narrow",desc:"Computes the time of impact of two objects.",parent:'13674'},{ty:"trait",name:"DynamicCollisionDetector",path:"ncollide3df32::narrow",desc:"Trait to be implemented by collision detector using dynamic dispatch."},{ty:"trait",name:"GeomGeomCollisionDetector",path:"ncollide3df32::narrow",desc:"Same as the `CollisionDetector` trait but using dynamic dispatch on the geometries."},{ty:"tymethod",name:"update",path:"ncollide3df32::narrow",desc:"Runs the collision detection on two objects. It is assumed that the same\ncollision detector (the same structure) is always used with the same\npair of object.",parent:'18759'},{ty:"tymethod",name:"num_colls",path:"ncollide3df32::narrow",desc:"The number of collision detected during the last update.",parent:'18759'},{ty:"tymethod",name:"colls",path:"ncollide3df32::narrow",desc:"Collects the collisions detected during the last update.",parent:'18759'},{ty:"trait",name:"CollisionDetectorFactory",path:"ncollide3df32::narrow",desc:"Trait of structures able do build a new collision detector."},{ty:"tymethod",name:"build",path:"ncollide3df32::narrow",desc:"Builds a new collision detector.",parent:'20021'},{ty:"mod",name:"broad",path:"ncollide3df32",desc:"Broad phases."},{ty:"struct",name:"NoIdDispatcher",path:"ncollide3df32::broad",desc:"Dispatcher which disallows dispatches between identical pointers."},{ty:"struct",name:"BruteForceBroadPhase",path:"ncollide3df32::broad",desc:"The broad phase which does nothing."},{ty:"struct",name:"BruteForceBoundingVolumeBroadPhase",path:"ncollide3df32::broad",desc:"Broad phase with quadratic complexity but sped up using loose bounding volumes."},{ty:"struct",name:"BoundingVolumeProxy",path:"ncollide3df32::broad",desc:"Association of an object with its loose bounding volume."},{ty:"structfield",name:"bounding_volume",path:"ncollide3df32::broad",desc:"The objects loose bounding volume.",parent:'24780'},{ty:"structfield",name:"body",path:"ncollide3df32::broad",desc:"The object.",parent:'24780'},{ty:"struct",name:"DBVTBroadPhase",path:"ncollide3df32::broad",desc:"Broad phase based on a Dynamic Bounding Volume Tree."},{ty:"trait",name:"BroadPhase",path:"ncollide3df32::broad",desc:"Trait all broad phase must implement."},{ty:"tymethod",name:"add",path:"ncollide3df32::broad",desc:"Adds an element to this broad phase.",parent:'24322'},{ty:"tymethod",name:"remove",path:"ncollide3df32::broad",desc:"Removes an element from this broad phase.",parent:'24322'},{ty:"tymethod",name:"update",path:"ncollide3df32::broad",desc:"Updates the collision pairs based on the objects bounding volumes.",parent:'24322'},{ty:"tymethod",name:"update_object",path:"ncollide3df32::broad",desc:"Updates the collision pairs involving one specific object.",parent:'24322'},{ty:"trait",name:"InterferencesBroadPhase",path:"ncollide3df32::broad",desc:"Broad phase which check for pairwise interferences."},{ty:"tymethod",name:"activate",path:"ncollide3df32::broad",desc:"Marks and object as active.",parent:'24358'},{ty:"tymethod",name:"deactivate",path:"ncollide3df32::broad",desc:"Marks and object as inactive.",parent:'24358'},{ty:"tymethod",name:"for_each_pair",path:"ncollide3df32::broad",desc:"Execute a function on each interference detected by the broad phase.",parent:'24358'},{ty:"tymethod",name:"for_each_pair_mut",path:"ncollide3df32::broad",desc:"Execute a function on each interference detected by the broad phase.",parent:'24358'},{ty:"trait",name:"BoundingVolumeBroadPhase",path:"ncollide3df32::broad",desc:"Trait of broad phases working with bounding volume."},{ty:"tymethod",name:"interferences_with_bounding_volume",path:"ncollide3df32::broad",desc:"Collects every object which might intersect a given bounding volume.",parent:'24451'},{ty:"trait",name:"RayCastBroadPhase",path:"ncollide3df32::broad",desc:"Traits of broad phase able to run fast ray-cast queries."},{ty:"tymethod",name:"interferences_with_ray",path:"ncollide3df32::broad",desc:"Collects every object which might intersect a ray.",parent:'24474'},{ty:"trait",name:"Dispatcher",path:"ncollide3df32::broad",desc:"Trait of dispatcher."},{ty:"tymethod",name:"dispatch",path:"ncollide3df32::broad",desc:"Deduce the narrow phase from two bodies.",parent:'24498'},{ty:"tymethod",name:"is_valid",path:"ncollide3df32::broad",desc:"Tells whether a collision between two bodies can occur.",parent:'24498'},{ty:"mod",name:"contact",path:"ncollide3df32",desc:"Main data structure for contacts."},{ty:"struct",name:"Contact",path:"ncollide3df32::contact",desc:"Geometric description of a contact."},{ty:"structfield",name:"world1",path:"ncollide3df32::contact",desc:"Position of the contact on the first object. The position is expressed in world space.",parent:'27392'},{ty:"structfield",name:"world2",path:"ncollide3df32::contact",desc:"Position of the contact on the second object. The position is expressed in world space.",parent:'27392'},{ty:"structfield",name:"normal",path:"ncollide3df32::contact",desc:"Contact normal",parent:'27392'},{ty:"structfield",name:"depth",path:"ncollide3df32::contact",desc:"Penetration depth",parent:'27392'},{ty:"method",name:"decode",path:"ncollide3df32::contact",desc:"",parent:'27392'},{ty:"method",name:"encode",path:"ncollide3df32::contact",desc:"",parent:'27392'},{ty:"method",name:"clone",path:"ncollide3df32::contact",desc:"",parent:'27392'},{ty:"method",name:"eq",path:"ncollide3df32::contact",desc:"",parent:'27392'},{ty:"method",name:"ne",path:"ncollide3df32::contact",desc:"",parent:'27392'},{ty:"method",name:"fmt",path:"ncollide3df32::contact",desc:"",parent:'27392'},{ty:"method",name:"new",path:"ncollide3df32::contact",desc:"Creates a new contact.",parent:'27392'},{ty:"method",name:"flip",path:"ncollide3df32::contact",desc:"Reverts the contact normal and swaps `world1` and `world2`.",parent:'27392'},{ty:"mod",name:"volumetric",path:"ncollide3df32",desc:"Volume and inertia tensor computation."},{ty:"fn",name:"ball_volume",path:"ncollide3df32::volumetric",desc:"Computes the volume of a ball."},{ty:"fn",name:"box_volume",path:"ncollide3df32::volumetric",desc:"Computes the volume of a box."},{ty:"fn",name:"cone_volume",path:"ncollide3df32::volumetric",desc:"Computes the volume of a cone."},{ty:"fn",name:"capsule_volume",path:"ncollide3df32::volumetric",desc:"Computes the volume of a capsule."},{ty:"fn",name:"cylinder_volume",path:"ncollide3df32::volumetric",desc:"Computes the volume of a cylinder."},{ty:"trait",name:"Volumetric",path:"ncollide3df32::volumetric",desc:"Trait to be implemented by objects which have a mass, a center of mass, and an inverse\ninertia tensor."},{ty:"tymethod",name:"mass_properties",path:"ncollide3df32::volumetric",desc:"Given a density, this computes the mass, center of mass, and inertia tensor of this object.",parent:'28036'},{ty:"trait",name:"InertiaTensor",path:"ncollide3df32::volumetric",desc:"Trait to be implemented by inertia tensors."},{ty:"tymethod",name:"apply",path:"ncollide3df32::volumetric",desc:"Applies this inertia tensor to a vector.",parent:'27997'},{ty:"tymethod",name:"to_world_space",path:"ncollide3df32::volumetric",desc:"Transforms this inertia tensor from local space to world space.",parent:'27997'},{ty:"tymethod",name:"to_relative_wrt_point",path:"ncollide3df32::volumetric",desc:"Computes this inertia tensor relative to a given point.",parent:'27997'},{ty:"mod",name:"implicit",path:"ncollide3df32",desc:"Definition of support functions."},{ty:"fn",name:"cso_support_point",path:"ncollide3df32::implicit",desc:"Computes the support point of a CSO on a given direction."},{ty:"fn",name:"cso_support_point_without_margin",path:"ncollide3df32::implicit",desc:"Computes the support point of a CSO on a given direction."},{ty:"trait",name:"Implicit",path:"ncollide3df32::implicit",desc:"Traits of convex geometries representable by a support mapping function."},{ty:"method",name:"support_point",path:"ncollide3df32::implicit",desc:"Evaluates the support function of the object. A support function is a\nfunction associating a vector to the geometry point which maximizes their\ndot product.\n \n# Arguments:\n * `dir` - the input of the support function. It is not required for it to\n           be normalized.",parent:'29268'},{ty:"tymethod",name:"support_point_without_margin",path:"ncollide3df32::implicit",desc:"Evaluates the support function of the object. A support function is a\nfunction associating a vector to the geometry point which maximizes their\ndot product. This does not include the `margin` of the object. Margins are\ngeometry-dependent. Use `support_point` to sample the complete geometry.\n \n# Arguments:\n * `dir` - the input of the support function. It is not required for it to\n           be normalized.",parent:'29268'},{ty:"trait",name:"HasMargin",path:"ncollide3df32::implicit",desc:"Trait of geometries having a margin."},{ty:"tymethod",name:"margin",path:"ncollide3df32::implicit",desc:"The geometry margin.",parent:'29245'},{ty:"trait",name:"PreferedSamplingDirections",path:"ncollide3df32::implicit",desc:"Trait of geometries having prefered sampling directions for the Minkowski sampling algorithm."},{ty:"tymethod",name:"sample",path:"ncollide3df32::implicit",desc:"Applies a function to this geometry with a given transform.",parent:'29411'},{ty:"mod",name:"partitioning",path:"ncollide3df32",desc:"Spatial partitioning tools."},{ty:"struct",name:"DBVT",path:"ncollide3df32::partitioning",desc:"A Dynamic Bounding Volume Tree."},{ty:"struct",name:"DBVTLeaf",path:"ncollide3df32::partitioning",desc:"Leaf of a Dynamic Bounding Volume Tree."},{ty:"structfield",name:"bounding_volume",path:"ncollide3df32::partitioning",desc:"The bounding volume of this node.",parent:'31925'},{ty:"structfield",name:"center",path:"ncollide3df32::partitioning",desc:"The center of this node bounding volume.",parent:'31925'},{ty:"structfield",name:"object",path:"ncollide3df32::partitioning",desc:"An user-defined object.",parent:'31925'},{ty:"structfield",name:"parent",path:"ncollide3df32::partitioning",desc:"This node parent.",parent:'31925'},{ty:"struct",name:"BVT",path:"ncollide3df32::partitioning",desc:"AÂ Boundig Volume Tree."},{ty:"struct",name:"RayInterferencesCollector",path:"ncollide3df32::partitioning",desc:"Bounding Volume Tree visitor collecting interferences with a given ray."},{ty:"struct",name:"BoundingVolumeInterferencesCollector",path:"ncollide3df32::partitioning",desc:"Bounding Volume Tree visitor collecting interferences with a given bounding volume."},{ty:"enum",name:"DBVTLeafState",path:"ncollide3df32::partitioning",desc:"State of a leaf."},{ty:"enum",name:"BinaryPartition",path:"ncollide3df32::partitioning",desc:"Result of a binary partitioning."},{ty:"variant",name:"Part",path:"ncollide3df32::partitioning",desc:"Result of the partitioning of one element.",parent:'33765'},{ty:"variant",name:"Parts",path:"ncollide3df32::partitioning",desc:"Result of the partitioning of several elements.",parent:'33765'},{ty:"fn",name:"kdtree_partitioner",path:"ncollide3df32::partitioning",desc:"Construction function for a kdree."},{ty:"trait",name:"BVTVisitor",path:"ncollide3df32::partitioning",desc:"Visitor of Bounding Volume Trees."},{ty:"tymethod",name:"visit_internal",path:"ncollide3df32::partitioning",desc:"Visits an internal node. Returns `true` if the internal node children have to be visited\ntoo.",parent:'34907'},{ty:"tymethod",name:"visit_leaf",path:"ncollide3df32::partitioning",desc:"Visits a leaf.",parent:'34907'},{ty:"method",name:"visit_internal_mut",path:"ncollide3df32::partitioning",desc:"Visits an internal node. Returns `true` if the internal node children have to be visited\ntoo.",parent:'34907'},{ty:"method",name:"visit_leaf_mut",path:"ncollide3df32::partitioning",desc:"Visits a leaf.",parent:'34907'},{ty:"mod",name:"util",path:"ncollide3df32",desc:"Data structure utilities.\nData structure utilities."},{ty:"mod",name:"pair",path:"ncollide3df32::util",desc:"Hashable pair of objects implementing `HasUid`."},{ty:"struct",name:"Pair",path:"ncollide3df32::util::pair",desc:"An unordered pair of elements implementing `HasUid`."},{ty:"structfield",name:"first",path:"ncollide3df32::util::pair",desc:"first object of the pair",parent:'35213'},{ty:"structfield",name:"second",path:"ncollide3df32::util::pair",desc:"second object of the pair",parent:'35213'},{ty:"struct",name:"PairTWHash",path:"ncollide3df32::util::pair",desc:"Tomas Wang based hash function for a `Pair` object."},{ty:"method",name:"decode",path:"ncollide3df32::util::pair",desc:"",parent:'35213'},{ty:"method",name:"encode",path:"ncollide3df32::util::pair",desc:"",parent:'35213'},{ty:"method",name:"clone",path:"ncollide3df32::util::pair",desc:"",parent:'35213'},{ty:"method",name:"new",path:"ncollide3df32::util::pair",desc:"Builds a new `Pair`.",parent:'35213'},{ty:"method",name:"eq",path:"ncollide3df32::util::pair",desc:"",parent:'35213'},{ty:"method",name:"decode",path:"ncollide3df32::util::pair",desc:"",parent:'35548'},{ty:"method",name:"encode",path:"ncollide3df32::util::pair",desc:"",parent:'35548'},{ty:"method",name:"new",path:"ncollide3df32::util::pair",desc:"Creates a new PairTWHash",parent:'35548'},{ty:"method",name:"hash",path:"ncollide3df32::util::pair",desc:"",parent:'35548'},{ty:"mod",name:"hash",path:"ncollide3df32::util",desc:"Trait for hash functions."},{ty:"struct",name:"UintPairTWHash",path:"ncollide3df32::util::hash",desc:"Hash function for pairs of `uint`, using the Tomas Wang hash."},{ty:"struct",name:"UintTWHash",path:"ncollide3df32::util::hash",desc:"Hash function for `uint`."},{ty:"fn",name:"key_from_pair",path:"ncollide3df32::util::hash",desc:"Combines two `uint` on a single one."},{ty:"fn",name:"tomas_wang_hash",path:"ncollide3df32::util::hash",desc:"Tomas Wang integer hash function."},{ty:"trait",name:"HashFun",path:"ncollide3df32::util::hash",desc:"Hash function."},{ty:"tymethod",name:"hash",path:"ncollide3df32::util::hash",desc:"Hash function.",parent:'35686'},{ty:"method",name:"decode",path:"ncollide3df32::util::hash",desc:"",parent:'35699'},{ty:"method",name:"encode",path:"ncollide3df32::util::hash",desc:"",parent:'35699'},{ty:"method",name:"clone",path:"ncollide3df32::util::hash",desc:"",parent:'35699'},{ty:"method",name:"new",path:"ncollide3df32::util::hash",desc:"Creates a new UintPairTWHash.",parent:'35699'},{ty:"method",name:"hash",path:"ncollide3df32::util::hash",desc:"",parent:'35699'},{ty:"method",name:"decode",path:"ncollide3df32::util::hash",desc:"",parent:'35879'},{ty:"method",name:"encode",path:"ncollide3df32::util::hash",desc:"",parent:'35879'},{ty:"method",name:"clone",path:"ncollide3df32::util::hash",desc:"",parent:'35879'},{ty:"method",name:"new",path:"ncollide3df32::util::hash",desc:"Creates a new UintTWHash.",parent:'35879'},{ty:"method",name:"hash",path:"ncollide3df32::util::hash",desc:"",parent:'35879'},{ty:"mod",name:"hash_map",path:"ncollide3df32::util",desc:"An hash map with a customizable hash function."},{ty:"struct",name:"Entry",path:"ncollide3df32::util::hash_map",desc:"Entry of an `HashMap`."},{ty:"structfield",name:"key",path:"ncollide3df32::util::hash_map",desc:"The key of the entry.",parent:'36142'},{ty:"structfield",name:"value",path:"ncollide3df32::util::hash_map",desc:"The value of the entry.",parent:'36142'},{ty:"struct",name:"HashMap",path:"ncollide3df32::util::hash_map",desc:"Alternative implementation of `HashMap`."},{ty:"method",name:"decode",path:"ncollide3df32::util::hash_map",desc:"",parent:'36142'},{ty:"method",name:"encode",path:"ncollide3df32::util::hash_map",desc:"",parent:'36142'},{ty:"method",name:"clone",path:"ncollide3df32::util::hash_map",desc:"",parent:'36142'},{ty:"method",name:"decode",path:"ncollide3df32::util::hash_map",desc:"",parent:'36366'},{ty:"method",name:"encode",path:"ncollide3df32::util::hash_map",desc:"",parent:'36366'},{ty:"method",name:"clone",path:"ncollide3df32::util::hash_map",desc:"",parent:'36366'},{ty:"method",name:"new",path:"ncollide3df32::util::hash_map",desc:"Creates a new hash map.",parent:'36366'},{ty:"method",name:"new_with_capacity",path:"ncollide3df32::util::hash_map",desc:"Creates a new hash map with a given capacity.",parent:'36366'},{ty:"method",name:"elements",path:"ncollide3df32::util::hash_map",desc:"The elements added to this hash map.",parent:'36366'},{ty:"method",name:"elements_mut",path:"ncollide3df32::util::hash_map",desc:"The elements added to this hash map.",parent:'36366'},{ty:"method",name:"remove_elem_at",path:"ncollide3df32::util::hash_map",desc:"Removes the element at the specified position of the element array.",parent:'36366'},{ty:"method",name:"get_and_remove",path:"ncollide3df32::util::hash_map",desc:"Removes an element and returns its value if it existed.",parent:'36366'},{ty:"method",name:"find_or_insert_lazy",path:"ncollide3df32::util::hash_map",desc:"Same as `self.insert_or_replace(key, value, false)` but with `value` a function which is\ncalled iff. the value does not exist yet.",parent:'36366'},{ty:"method",name:"insert_or_replace",path:"ncollide3df32::util::hash_map",desc:"Inserts or replace an element.",parent:'36366'},{ty:"method",name:"len",path:"ncollide3df32::util::hash_map",desc:"",parent:'36366'},{ty:"method",name:"clear",path:"ncollide3df32::util::hash_map",desc:"",parent:'36366'},{ty:"method",name:"contains_key",path:"ncollide3df32::util::hash_map",desc:"",parent:'36366'},{ty:"method",name:"find",path:"ncollide3df32::util::hash_map",desc:"",parent:'36366'},{ty:"method",name:"insert",path:"ncollide3df32::util::hash_map",desc:"Inserts an element on the hash map.",parent:'36366'},{ty:"method",name:"remove",path:"ncollide3df32::util::hash_map",desc:"Remove an element from the hash map.",parent:'36366'},{ty:"method",name:"find_mut",path:"ncollide3df32::util::hash_map",desc:"Gets a mutable reference to an element of the hashmap.",parent:'36366'},{ty:"mod",name:"owned_allocation_cache",path:"ncollide3df32::util",desc:"Allocation cache for owned objects."},{ty:"struct",name:"OwnedAllocationCache",path:"ncollide3df32::util::owned_allocation_cache",desc:"Cache for owned objects."},{ty:"method",name:"new",path:"ncollide3df32::util::owned_allocation_cache",desc:"Initializes the cache.",parent:'38135'},{ty:"method",name:"alloc",path:"ncollide3df32::util::owned_allocation_cache",desc:"Box a value into a potentially already allocated box.",parent:'38135'},{ty:"method",name:"retain",path:"ncollide3df32::util::owned_allocation_cache",desc:"Retains a box which can be re-used by the `box` method.",parent:'38135'},{ty:"method",name:"clear",path:"ncollide3df32::util::owned_allocation_cache",desc:"Clears the cache, destroying any stored pointer.",parent:'38135'},{ty:"mod",name:"has_uid",path:"ncollide3df32::util",desc:"Objects with an unique identifier."},{ty:"trait",name:"HasUid",path:"ncollide3df32::util::has_uid",desc:"Trait of objects having an unique identifier."},{ty:"tymethod",name:"uid",path:"ncollide3df32::util::has_uid",desc:"An unique identifier. It should be O(1).",parent:'38225'},{ty:"mod",name:"math",path:"ncollide3df32",desc:"Compilation flags dependent aliases for mathematical types."},{ty:"typedef",name:"Scalar",path:"ncollide3df32::math",desc:"The scalar type."},{ty:"typedef",name:"Vector",path:"ncollide3df32::math",desc:"The vector type."},{ty:"typedef",name:"Orientation",path:"ncollide3df32::math",desc:"The orientation type."},{ty:"typedef",name:"Matrix",path:"ncollide3df32::math",desc:"The transformation matrix type."},{ty:"typedef",name:"AngularInertia",path:"ncollide3df32::math",desc:"The inertia tensor type."}];var allPaths = {'8199':{type:'mod',name:'geom_with_margin'},'14337':{type:'fn',name:'collide'},'16589':{type:'struct',name:'IncrementalContactManifoldGenerator'},'33194':{type:'mod',name:'bvt'},'8378':{type:'struct',name:'Mesh'},'23279':{type:'fn',name:'closest_points'},'24322':{type:'trait',name:'BroadPhase'},'1563':{type:'mod',name:'aabb_capsule'},'24903':{type:'struct',name:'BruteForceBoundingVolumeBroadPhase'},'36142':{type:'struct',name:'Entry'},'29105':{type:'mod',name:'volumetric_mesh'},'36366':{type:'struct',name:'HashMap'},'24763':{type:'mod',name:'brute_force_bounding_volume_broad_phase'},'34901':{type:'mod',name:'bvt_visitor'},'28452':{type:'mod',name:'volumetric_box'},'34907':{type:'trait',name:'BVTVisitor'},'28167':{type:'mod',name:'volumetric_ball'},'29231':{type:'mod',name:'implicit'},'17598':{type:'mod',name:'one_shot_contact_manifold_generator'},'1630':{type:'mod',name:'aabb_convex'},'35879':{type:'struct',name:'UintTWHash'},'38378':{type:'typedef',name:'Orientation'},'30779':{type:'mod',name:'implicit_minkowski_sum'},'10100':{type:'mod',name:'ray_ball'},'35686':{type:'trait',name:'HashFun'},'13633':{type:'mod',name:'narrow'},'38388':{type:'typedef',name:'AngularInertia'},'18041':{type:'struct',name:'ConcaveGeomGeom'},'7641':{type:'mod',name:'triangle'},'12244':{type:'mod',name:'ray_triangle'},'18674':{type:'struct',name:'GeomConcaveGeomFactory'},'9':{type:'mod',name:'bounding_volume'},'12310':{type:'fn',name:'triangle_ray_intersection'},'5000':{type:'mod',name:'convex'},'18497':{type:'struct',name:'GeomConcaveGeom'},'24780':{type:'struct',name:'BoundingVolumeProxy'},'36136':{type:'mod',name:'hash_map'},'31064':{type:'fn',name:'cso_support_point'},'7158':{type:'struct',name:'Segment'},'20153':{type:'mod',name:'johnson_simplex'},'2701':{type:'struct',name:'Box'},'1854':{type:'trait',name:'ConcaveGeom'},'36026':{type:'fn',name:'key_from_pair'},'1826':{type:'mod',name:'geom'},'13440':{type:'mod',name:'ray_bvt'},'0':{type:'mod',name:'ncollide3df32'},'51':{type:'struct',name:'AABB'},'14531':{type:'fn',name:'toi'},'12661':{type:'mod',name:'ray_concave'},'22973':{type:'enum',name:'GJKResult'},'1801':{type:'mod',name:'geom'},'22974':{type:'enum',name:'GJKResult'},'29245':{type:'trait',name:'HasMargin'},'29194':{type:'mod',name:'volumetric_segment'},'8208':{type:'struct',name:'GeomWithMargin'},'30400':{type:'mod',name:'implicit_reflection'},'9647':{type:'trait',name:'RayCast'},'24474':{type:'trait',name:'RayCastBroadPhase'},'29411':{type:'trait',name:'PreferedSamplingDirections'},'20088':{type:'trait',name:'Simplex'},'20083':{type:'mod',name:'algorithm'},'38218':{type:'mod',name:'has_uid'},'3212':{type:'mod',name:'capsule'},'28036':{type:'trait',name:'Volumetric'},'28179':{type:'fn',name:'ball_volume'},'1535':{type:'mod',name:'aabb_cylinder'},'1842':{type:'trait',name:'Geom'},'4394':{type:'mod',name:'cylinder'},'11551':{type:'fn',name:'implicit_toi_and_normal_with_ray'},'14943':{type:'struct',name:'ImplicitPlane'},'18715':{type:'mod',name:'geom_geom'},'35213':{type:'struct',name:'Pair'},'38373':{type:'typedef',name:'Vector'},'35208':{type:'mod',name:'pair'},'38370':{type:'typedef',name:'Scalar'},'1745':{type:'mod',name:'aabb_triangle'},'33212':{type:'struct',name:'BVT'},'2371':{type:'struct',name:'Plane'},'3792':{type:'struct',name:'Cone'},'18020':{type:'mod',name:'concave_geom_geom'},'2367':{type:'mod',name:'plane'},'24496':{type:'mod',name:'dispatcher'},'27386':{type:'mod',name:'contact'},'27392':{type:'struct',name:'Contact'},'7648':{type:'struct',name:'Triangle'},'15970':{type:'fn',name:'collide'},'8320':{type:'mod',name:'mesh'},'23927':{type:'mod',name:'minkowski_sampling'},'10706':{type:'mod',name:'ray_aabb'},'29268':{type:'trait',name:'Implicit'},'35548':{type:'struct',name:'PairTWHash'},'11521':{type:'mod',name:'ray_implicit'},'23580':{type:'fn',name:'project_origin'},'30659':{type:'mod',name:'implicit_segment'},'23385':{type:'fn',name:'closest_points_without_margin'},'23945':{type:'fn',name:'closest_points'},'38133':{type:'mod',name:'owned_allocation_cache'},'38383':{type:'typedef',name:'Matrix'},'31925':{type:'struct',name:'DBVTLeaf'},'29705':{type:'mod',name:'implicit_capsule'},'28673':{type:'fn',name:'cone_volume'},'14610':{type:'struct',name:'PlaneImplicit'},'30240':{type:'mod',name:'implicit_convex'},'29240':{type:'mod',name:'implicit'},'17610':{type:'struct',name:'OneShotContactManifoldGenerator'},'9928':{type:'mod',name:'ray_plane'},'919':{type:'fn',name:'implicit_shape_aabb'},'39':{type:'trait',name:'HasAABB'},'20085':{type:'mod',name:'simplex'},'25652':{type:'struct',name:'DBVTBroadPhase'},'14469':{type:'fn',name:'closest_points'},'31131':{type:'fn',name:'cso_support_point_without_margin'},'3788':{type:'mod',name:'cone'},'31212':{type:'mod',name:'dbvt'},'36047':{type:'fn',name:'tomas_wang_hash'},'5450':{type:'struct',name:'AnnotatedMinkowskiSum'},'31803':{type:'enum',name:'DBVTLeafState'},'16231':{type:'fn',name:'toi'},'8346':{type:'trait',name:'MeshElement'},'15458':{type:'mod',name:'implicit_implicit'},'1318':{type:'mod',name:'bounding_volume'},'2061':{type:'struct',name:'Ball'},'9309':{type:'mod',name:'ray'},'1487':{type:'fn',name:'ball_aabb'},'13659':{type:'mod',name:'collide'},'22982':{type:'enum',name:'GJKResult'},'2058':{type:'mod',name:'ball'},'8375':{type:'typedef',name:'MeshPrimitive'},'10532':{type:'mod',name:'ray_box'},'15392':{type:'fn',name:'toi'},'24498':{type:'trait',name:'Dispatcher'},'6752':{type:'struct',name:'Compound'},'24358':{type:'trait',name:'InterferencesBroadPhase'},'20178':{type:'struct',name:'JohnsonSimplex'},'25619':{type:'mod',name:'dbvt_broad_phase'},'35077':{type:'struct',name:'BoundingVolumeInterferencesCollector'},'27977':{type:'mod',name:'volumetric'},'28463':{type:'fn',name:'box_volume'},'5113':{type:'mod',name:'minkowski_sum'},'18633':{type:'struct',name:'ConcaveGeomGeomFactory'},'1476':{type:'mod',name:'aabb_ball'},'18808':{type:'trait',name:'DynamicCollisionDetector'},'38135':{type:'struct',name:'OwnedAllocationCache'},'10397':{type:'fn',name:'ball_toi_with_ray'},'13654':{type:'mod',name:'toi'},'6736':{type:'mod',name:'compound'},'1395':{type:'mod',name:'aabb_box'},'28847':{type:'mod',name:'volumetric_capsule'},'29034':{type:'mod',name:'volumetric_convex'},'9594':{type:'struct',name:'RayIntersection'},'34971':{type:'struct',name:'RayInterferencesCollector'},'33769':{type:'enum',name:'BinaryPartition'},'33786':{type:'enum',name:'BinaryPartition'},'7151':{type:'mod',name:'segment'},'13769':{type:'struct',name:'Empty'},'4398':{type:'struct',name:'Cylinder'},'1039':{type:'struct',name:'WithAABB'},'9328':{type:'struct',name:'Ray'},'9939':{type:'fn',name:'plane_toi_with_ray'},'22978':{type:'enum',name:'GJKResult'},'13761':{type:'mod',name:'empty'},'5155':{type:'struct',name:'MinkowskiSum'},'12888':{type:'mod',name:'ray_mesh'},'1330':{type:'trait',name:'BoundingVolume'},'28297':{type:'mod',name:'volumetric_cylinder'},'27987':{type:'mod',name:'volumetric'},'15291':{type:'fn',name:'collide'},'22956':{type:'mod',name:'gjk'},'1658':{type:'mod',name:'aabb_compound'},'27997':{type:'trait',name:'InertiaTensor'},'28857':{type:'fn',name:'capsule_volume'},'23739':{type:'fn',name:'project_origin_with_max_dist'},'20244':{type:'struct',name:'RecursionTemplate'},'23475':{type:'fn',name:'closest_points_without_margin_with_max_dist'},'28905':{type:'mod',name:'volumetric_compound'},'30498':{type:'mod',name:'implicit_triangle'},'13664':{type:'mod',name:'closest_points'},'3215':{type:'struct',name:'Capsule'},'24602':{type:'struct',name:'BruteForceBroadPhase'},'13674':{type:'trait',name:'CollisionDetector'},'31374':{type:'struct',name:'DBVT'},'34513':{type:'fn',name:'kdtree_partitioner'},'1773':{type:'mod',name:'aabb_segment'},'24319':{type:'mod',name:'broad_phase'},'1321':{type:'trait',name:'HasBoundingVolume'},'29622':{type:'mod',name:'implicit_ball'},'29068':{type:'mod',name:'volumetric_plane'},'38225':{type:'trait',name:'HasUid'},'1448':{type:'mod',name:'aabb_cone'},'28308':{type:'fn',name:'cylinder_volume'},'24534':{type:'struct',name:'NoIdDispatcher'},'21':{type:'mod',name:'aabb'},'20021':{type:'trait',name:'CollisionDetectorFactory'},'24451':{type:'trait',name:'BoundingVolumeBroadPhase'},'30050':{type:'mod',name:'implicit_cylinder'},'1591':{type:'mod',name:'aabb_plane'},'29833':{type:'mod',name:'implicit_cone'},'38364':{type:'mod',name:'math'},'14021':{type:'mod',name:'ball_ball'},'6590':{type:'mod',name:'reflection'},'35699':{type:'struct',name:'UintPairTWHash'},'6592':{type:'struct',name:'Reflection'},'35206':{type:'mod',name:'util'},'19097':{type:'struct',name:'GeomGeomDispatcher'},'24594':{type:'mod',name:'brute_force_broad_phase'},'18759':{type:'trait',name:'GeomGeomCollisionDetector'},'1374':{type:'trait',name:'LooseBoundingVolume'},'14036':{type:'struct',name:'BallBall'},'5006':{type:'struct',name:'Convex'},'2693':{type:'mod',name:'box_geom'},'29432':{type:'mod',name:'implicit_box'},'28662':{type:'mod',name:'volumetric_cone'},'33765':{type:'enum',name:'BinaryPartition'},'9319':{type:'mod',name:'ray'},'14593':{type:'mod',name:'plane_implicit'},'24304':{type:'mod',name:'broad'},'16302':{type:'mod',name:'incremental_contact_manifold_generator'},'35683':{type:'mod',name:'hash'},'31198':{type:'mod',name:'partitioning'},'15491':{type:'struct',name:'ImplicitImplicit'},'13667':{type:'mod',name:'collision_detector'},'29142':{type:'mod',name:'volumetric_triangle'}};