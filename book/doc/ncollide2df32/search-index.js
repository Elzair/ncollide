var searchIndex = [{ty:"mod",name:"",path:"ncollide2df32",desc:"ncollide  [![Build Status](https://travis-ci.org/sebcrozet/ncollide.png?branch=master)](https://travis-ci.org/sebcrozet/ncollide)\n========"},{ty:"mod",name:"bounding_volume",path:"ncollide2df32",desc:"Bounding volumes."},{ty:"struct",name:"AABB",path:"ncollide2df32::bounding_volume",desc:"An Axis Aligned Bounding Box."},{ty:"struct",name:"WithAABB",path:"ncollide2df32::bounding_volume",desc:"Wrapper which implements `HasBoundingVolume<Matrix, AABB>` for objects implementing `HasAABB`."},{ty:"fn",name:"implicit_shape_aabb",path:"ncollide2df32::bounding_volume",desc:"Builds the AABB of an implicit shape."},{ty:"fn",name:"ball_aabb",path:"ncollide2df32::bounding_volume",desc:"Computes the Axis-Aligned Bounding Box of a ball."},{ty:"trait",name:"HasAABB",path:"ncollide2df32::bounding_volume",desc:"Traits of objects that can be approximated by an AABB."},{ty:"tymethod",name:"aabb",path:"ncollide2df32::bounding_volume",desc:"The objectâ€™s AABB.",parent:'39'},{ty:"trait",name:"HasBoundingVolume",path:"ncollide2df32::bounding_volume",desc:"Traits of objects having a bounding volume."},{ty:"tymethod",name:"bounding_volume",path:"ncollide2df32::bounding_volume",desc:"The object bounding volume.",parent:'1321'},{ty:"trait",name:"BoundingVolume",path:"ncollide2df32::bounding_volume",desc:"Trait of bounding volumes."},{ty:"tymethod",name:"intersects",path:"ncollide2df32::bounding_volume",desc:"Checks if this bounding volume intersect with another one.",parent:'1330'},{ty:"tymethod",name:"contains",path:"ncollide2df32::bounding_volume",desc:"Checks if this bounding volume contains another one.",parent:'1330'},{ty:"tymethod",name:"merge",path:"ncollide2df32::bounding_volume",desc:"Merges this bounding volume with another one. The merge is done in-place.",parent:'1330'},{ty:"tymethod",name:"merged",path:"ncollide2df32::bounding_volume",desc:"Merges this bounding volume with another one.",parent:'1330'},{ty:"trait",name:"LooseBoundingVolume",path:"ncollide2df32::bounding_volume",desc:"Trait of loose bounding volume."},{ty:"tymethod",name:"loosen",path:"ncollide2df32::bounding_volume",desc:"Enlarges this bounding volume.",parent:'1374'},{ty:"tymethod",name:"loosened",path:"ncollide2df32::bounding_volume",desc:"Creates a new, enlarged version, of this bounding volume.",parent:'1374'},{ty:"mod",name:"geom",path:"ncollide2df32",desc:"Geometric primitives."},{ty:"struct",name:"Ball",path:"ncollide2df32::geom",desc:"A Ball geometry."},{ty:"struct",name:"Plane",path:"ncollide2df32::geom",desc:"Implicit description of a plane."},{ty:"structfield",name:"normal",path:"ncollide2df32::geom",desc:"The plane normal.",parent:'2371'},{ty:"struct",name:"Box",path:"ncollide2df32::geom",desc:"Geometry of a box."},{ty:"struct",name:"Capsule",path:"ncollide2df32::geom",desc:"Implicit description of a capsule geometry with its principal axis aligned with the `x` axis."},{ty:"struct",name:"Cone",path:"ncollide2df32::geom",desc:"Implicit description of a cylinder geometry with its principal axis aligned with the `x` axis."},{ty:"struct",name:"Cylinder",path:"ncollide2df32::geom",desc:"Implicit description of a cylinder geometry with its principal axis aligned with the `x` axis."},{ty:"struct",name:"Convex",path:"ncollide2df32::geom",desc:"Set of point assumed to form a convex polytope."},{ty:"struct",name:"MinkowskiSum",path:"ncollide2df32::geom",desc:"Implicit representation of the Minkowski sum of two geometries."},{ty:"struct",name:"AnnotatedMinkowskiSum",path:"ncollide2df32::geom",desc:"Same as the MinkowskiSum but with a support mapping which keeps track of the\noriginal supports points from the two wrapped geometries."},{ty:"struct",name:"Reflection",path:"ncollide2df32::geom",desc:"Implicit representation of the reflection of a geometry."},{ty:"struct",name:"Compound",path:"ncollide2df32::geom",desc:"A compound geometry with an aabb bounding volume."},{ty:"struct",name:"GeomWithMargin",path:"ncollide2df32::geom",desc:"Extends the wrapped geometry with its margin."},{ty:"struct",name:"Mesh",path:"ncollide2df32::geom",desc:"Geometry commonly known as a 2d line strip or a 3d triangle mesh."},{ty:"struct",name:"Segment",path:"ncollide2df32::geom",desc:"A segment geometry."},{ty:"struct",name:"Triangle",path:"ncollide2df32::geom",desc:"A triangle geometry."},{ty:"typedef",name:"MeshPrimitive",path:"ncollide2df32::geom",desc:""},{ty:"trait",name:"MeshElement",path:"ncollide2df32::geom",desc:"Trait implemented by elements usable on the Mesh."},{ty:"tymethod",name:"nvertices",path:"ncollide2df32::geom",desc:"The number of vertices of this mesh element.",parent:'8346'},{ty:"tymethod",name:"new_with_vertices_and_indices",path:"ncollide2df32::geom",desc:"Creates a new mesh element from a set of vertices and indices and the margin.",parent:'8346'},{ty:"trait",name:"Geom",path:"ncollide2df32::geom",desc:"Trait implemented by each geometry supported by `ncollide`."},{ty:"tymethod",name:"duplicate",path:"ncollide2df32::geom",desc:"Duplicates (clones) this geometry.",parent:'1842'},{ty:"trait",name:"ConcaveGeom",path:"ncollide2df32::geom",desc:"Trait implemented by concave, composite geometries supported by `ncollide`."},{ty:"tymethod",name:"map_part_at",path:"ncollide2df32::geom",desc:"Applies a function to each sub-geometry of this concave geometry.",parent:'1854'},{ty:"tymethod",name:"map_transformed_part_at",path:"ncollide2df32::geom",desc:"Applies a transformation matrix and a function to each sub-geometry of this concave\ngeometry.",parent:'1854'},{ty:"tymethod",name:"approx_interferences_with_aabb",path:"ncollide2df32::geom",desc:"Computes the indices of every sub-geometry which might intersect a given AABB.",parent:'1854'},{ty:"tymethod",name:"approx_interferences_with_ray",path:"ncollide2df32::geom",desc:"Computes the indices of every sub-geometry which might intersect a given Ray.",parent:'1854'},{ty:"tymethod",name:"aabb_at",path:"ncollide2df32::geom",desc:"Gets the AABB of the geometry identified by the index `i`.",parent:'1854'},{ty:"mod",name:"ray",path:"ncollide2df32",desc:"Ray casting utilities."},{ty:"struct",name:"Ray",path:"ncollide2df32::ray",desc:"A Ray."},{ty:"structfield",name:"orig",path:"ncollide2df32::ray",desc:"Starting point of the ray.",parent:'9327'},{ty:"structfield",name:"dir",path:"ncollide2df32::ray",desc:"Direction of the ray.",parent:'9327'},{ty:"struct",name:"RayIntersection",path:"ncollide2df32::ray",desc:"Structure containing the result of a successful ray cast."},{ty:"structfield",name:"toi",path:"ncollide2df32::ray",desc:"The time of impact of the ray with the object.  The exact contact point can be computed\nwith: `orig + dir * toi` where `orig` is the origin of the ray; `dir` is its direction and\n`toi` is the value of this field.",parent:'9593'},{ty:"structfield",name:"normal",path:"ncollide2df32::ray",desc:"The normal at the intersection point.",parent:'9593'},{ty:"fn",name:"plane_toi_with_ray",path:"ncollide2df32::ray",desc:"Computes the toi of a ray with a plane described by its center and normal."},{ty:"fn",name:"implicit_toi_and_normal_with_ray",path:"ncollide2df32::ray",desc:"Cast a ray on a geometry using the GJK algorithm."},{ty:"fn",name:"ball_toi_with_ray",path:"ncollide2df32::ray",desc:"Computes the time of impact of a ray on a ball."},{ty:"trait",name:"RayCast",path:"ncollide2df32::ray",desc:"Traits of objects which can be tested for intersection with a ray."},{ty:"method",name:"toi_with_ray",path:"ncollide2df32::ray",desc:"Computes the time of impact between this geometry and a ray",parent:'9618'},{ty:"tymethod",name:"toi_and_normal_with_ray",path:"ncollide2df32::ray",desc:"Computes the intersection point between this geometry and a ray.",parent:'9618'},{ty:"method",name:"intersects_ray",path:"ncollide2df32::ray",desc:"Tests whether a ray intersects this geometry.",parent:'9618'},{ty:"method",name:"toi_with_transform_and_ray",path:"ncollide2df32::ray",desc:"Computes the time of impact between this transform geometry and a ray.",parent:'9618'},{ty:"method",name:"toi_and_normal_with_transform_and_ray",path:"ncollide2df32::ray",desc:"Computes the time of impact, and normal between this transformed geometry and a ray.",parent:'9618'},{ty:"method",name:"intersects_with_transform_and_ray",path:"ncollide2df32::ray",desc:"Tests whether a ray intersects this transformed geometry.",parent:'9618'},{ty:"mod",name:"narrow",path:"ncollide2df32",desc:"Narrow phases."},{ty:"struct",name:"Empty",path:"ncollide2df32::narrow",desc:"A collision detector that does nothing."},{ty:"struct",name:"BallBall",path:"ncollide2df32::narrow",desc:"Collision detector between two balls."},{ty:"struct",name:"PlaneImplicit",path:"ncollide2df32::narrow",desc:"Collision detector between a plane and a geometry implementing the `Implicit` trait."},{ty:"struct",name:"ImplicitPlane",path:"ncollide2df32::narrow",desc:"Collision detector between a plane and a geometry implementing the `Implicit` trait."},{ty:"struct",name:"ImplicitImplicit",path:"ncollide2df32::narrow",desc:"Persistent collision detector between two shapes having a support mapping function."},{ty:"struct",name:"IncrementalContactManifoldGenerator",path:"ncollide2df32::narrow",desc:"Contact manifold generator which keeps track of several contacts."},{ty:"struct",name:"OneShotContactManifoldGenerator",path:"ncollide2df32::narrow",desc:"Contact manifold generator producing a full manifold at the first update."},{ty:"struct",name:"GeomGeomDispatcher",path:"ncollide2df32::narrow",desc:"Collision dispatcher between two `~Geom`."},{ty:"struct",name:"ConcaveGeomGeom",path:"ncollide2df32::narrow",desc:"Collision detector between a concave geometry and another geometry."},{ty:"struct",name:"GeomConcaveGeom",path:"ncollide2df32::narrow",desc:"Collision detector between a geometry and a concave geometry."},{ty:"struct",name:"ConcaveGeomGeomFactory",path:"ncollide2df32::narrow",desc:"Structure implementing `CollisionDetectorFactory` in order to create a new `ConcaveGeomGeom`\ncollision detector."},{ty:"struct",name:"GeomConcaveGeomFactory",path:"ncollide2df32::narrow",desc:"Structure implementing `CollisionDetectorFactory` in order to create a new `GeomConcaveGeom`\ncollision detector."},{ty:"mod",name:"toi",path:"ncollide2df32::narrow",desc:"Functions to compute the time of impact between two geometries."},{ty:"fn",name:"toi",path:"ncollide2df32::narrow::toi",desc:"Computes the Time Of Impact of two balls."},{ty:"fn",name:"toi",path:"ncollide2df32::narrow::toi",desc:"Computes the Time Of Impact of a geometry and a plane."},{ty:"fn",name:"toi",path:"ncollide2df32::narrow::toi",desc:"Computes the Time Of Impact of two geometries."},{ty:"mod",name:"collide",path:"ncollide2df32::narrow",desc:"Functions to compute one contact point between two geometries."},{ty:"fn",name:"collide",path:"ncollide2df32::narrow::collide",desc:"Computes the contact point between two balls."},{ty:"fn",name:"collide",path:"ncollide2df32::narrow::collide",desc:"Same as `update_collide_plane_implicit_shape` but the existing collision or `None`."},{ty:"fn",name:"collide",path:"ncollide2df32::narrow::collide",desc:"Computes a contact point between two implicit geometries."},{ty:"mod",name:"closest_points",path:"ncollide2df32::narrow",desc:"Functions to compute the closest points between two geometries."},{ty:"fn",name:"closest_points",path:"ncollide2df32::narrow::closest_points",desc:"Computes the closest points between two balls."},{ty:"mod",name:"algorithm",path:"ncollide2df32::narrow",desc:"Algorithms needed for distance and penetration depth computation."},{ty:"mod",name:"simplex",path:"ncollide2df32::narrow::algorithm",desc:"Abstract definition of a simplex usable by the GJK algorithm."},{ty:"trait",name:"Simplex",path:"ncollide2df32::narrow::algorithm::simplex",desc:"Trait of a simplex usable by the GJK algorithm."},{ty:"tymethod",name:"reset",path:"ncollide2df32::narrow::algorithm::simplex",desc:"Replace the point of the simplex by a single one. The simplex is reduced to be\n0-dimensional.",parent:'18801'},{ty:"tymethod",name:"translate_by",path:"ncollide2df32::narrow::algorithm::simplex",desc:"Translates each point of this simplex.",parent:'18801'},{ty:"tymethod",name:"add_point",path:"ncollide2df32::narrow::algorithm::simplex",desc:"Adds a point to the simplex.",parent:'18801'},{ty:"tymethod",name:"project_origin_and_reduce",path:"ncollide2df32::narrow::algorithm::simplex",desc:"Project the origin on the simplex and remove any sub-simplex which does not contain the\nprojection.",parent:'18801'},{ty:"tymethod",name:"project_origin",path:"ncollide2df32::narrow::algorithm::simplex",desc:"Projection the origin on the simplex. The simplex itself in unchanged, although it is mutable\nfor optimization purpose.",parent:'18801'},{ty:"tymethod",name:"contains_point",path:"ncollide2df32::narrow::algorithm::simplex",desc:"Checks whether a given point is already part of the simplex points.",parent:'18801'},{ty:"tymethod",name:"dimension",path:"ncollide2df32::narrow::algorithm::simplex",desc:"Dimension of the simplex. A simplex with `n` must be a `n - 1`-dimensional simplex.",parent:'18801'},{ty:"tymethod",name:"max_sq_len",path:"ncollide2df32::narrow::algorithm::simplex",desc:"The maximum among the simplex point squared lengths.",parent:'18801'},{ty:"mod",name:"johnson_simplex",path:"ncollide2df32::narrow::algorithm",desc:"Simplex using the Johnson subalgorithm to compute the projection of the origin on the simplex."},{ty:"struct",name:"JohnsonSimplex",path:"ncollide2df32::narrow::algorithm::johnson_simplex",desc:"Simplex using the Johnson subalgorithm to compute the projection of the origin on the simplex."},{ty:"struct",name:"RecursionTemplate",path:"ncollide2df32::narrow::algorithm::johnson_simplex",desc:"Set of indices to explain to the JohnsonSimplex how to do its work.\nBuilding this is very time consuming, and thus should be shared between all instances of the\nJohnson simplex."},{ty:"method",name:"clone",path:"ncollide2df32::narrow::algorithm::johnson_simplex",desc:"",parent:'18891'},{ty:"method",name:"decode",path:"ncollide2df32::narrow::algorithm::johnson_simplex",desc:"",parent:'18957'},{ty:"method",name:"encode",path:"ncollide2df32::narrow::algorithm::johnson_simplex",desc:"",parent:'18957'},{ty:"method",name:"clone",path:"ncollide2df32::narrow::algorithm::johnson_simplex",desc:"",parent:'18957'},{ty:"method",name:"eq",path:"ncollide2df32::narrow::algorithm::johnson_simplex",desc:"",parent:'18957'},{ty:"method",name:"ne",path:"ncollide2df32::narrow::algorithm::johnson_simplex",desc:"",parent:'18957'},{ty:"method",name:"new",path:"ncollide2df32::narrow::algorithm::johnson_simplex",desc:"Creates a new set of Recursion simplex sharable between any Johnson simplex having a\ndimension inferior or equal to `dim`.",parent:'18957'},{ty:"method",name:"new",path:"ncollide2df32::narrow::algorithm::johnson_simplex",desc:"Creates a new, empty, Johnson simplex.",parent:'18891'},{ty:"method",name:"new_w_tls",path:"ncollide2df32::narrow::algorithm::johnson_simplex",desc:"Creates a new, empty Johnson simplex. The recursion template uses the thread-local one.",parent:'18891'},{ty:"method",name:"reset",path:"ncollide2df32::narrow::algorithm::johnson_simplex",desc:"",parent:'18891'},{ty:"method",name:"dimension",path:"ncollide2df32::narrow::algorithm::johnson_simplex",desc:"",parent:'18891'},{ty:"method",name:"max_sq_len",path:"ncollide2df32::narrow::algorithm::johnson_simplex",desc:"",parent:'18891'},{ty:"method",name:"contains_point",path:"ncollide2df32::narrow::algorithm::johnson_simplex",desc:"",parent:'18891'},{ty:"method",name:"add_point",path:"ncollide2df32::narrow::algorithm::johnson_simplex",desc:"",parent:'18891'},{ty:"method",name:"project_origin_and_reduce",path:"ncollide2df32::narrow::algorithm::johnson_simplex",desc:"",parent:'18891'},{ty:"method",name:"project_origin",path:"ncollide2df32::narrow::algorithm::johnson_simplex",desc:"",parent:'18891'},{ty:"method",name:"translate_by",path:"ncollide2df32::narrow::algorithm::johnson_simplex",desc:"",parent:'18891'},{ty:"mod",name:"gjk",path:"ncollide2df32::narrow::algorithm",desc:"The Gilbertâ€“Johnsonâ€“Keerthi distance algorithm."},{ty:"enum",name:"GJKResult",path:"ncollide2df32::narrow::algorithm::gjk",desc:"Results of the GJK algorithm."},{ty:"variant",name:"Intersection",path:"ncollide2df32::narrow::algorithm::gjk",desc:"Result of the GJK algorithm when the origin is inside of the polytope.",parent:'21686'},{ty:"variant",name:"Projection",path:"ncollide2df32::narrow::algorithm::gjk",desc:"Result of the GJK algorithm when a projection of the origin on the polytope is found.",parent:'21686'},{ty:"variant",name:"NoIntersection",path:"ncollide2df32::narrow::algorithm::gjk",desc:"Result of the GJK algorithm when the origin is to far away from the polytope.",parent:'21686'},{ty:"fn",name:"closest_points",path:"ncollide2df32::narrow::algorithm::gjk",desc:"Computes the closest points between two convex geometries unsing the GJK algorithm."},{ty:"fn",name:"closest_points_without_margin",path:"ncollide2df32::narrow::algorithm::gjk",desc:"Computes the closest points between two convex geometries without their margins unsing the GJK\nalgorithm."},{ty:"fn",name:"closest_points_without_margin_with_max_dist",path:"ncollide2df32::narrow::algorithm::gjk",desc:"Computes the closest points between two convex geometries without their margins unsing the GJK\nalgorithm."},{ty:"fn",name:"project_origin",path:"ncollide2df32::narrow::algorithm::gjk",desc:"Projects the origin on a geometry unsing the GJK algorithm."},{ty:"fn",name:"project_origin_with_max_dist",path:"ncollide2df32::narrow::algorithm::gjk",desc:"Projects the origin on a geometry using the Separating Axis GJK algorithm.\nThe algorithm will stop as soon as the polytope can be proven to be at least `max_dist` away\nfrom the origin."},{ty:"method",name:"clone",path:"ncollide2df32::narrow::algorithm::gjk",desc:"",parent:'21686'},{ty:"method",name:"decode",path:"ncollide2df32::narrow::algorithm::gjk",desc:"",parent:'21686'},{ty:"method",name:"encode",path:"ncollide2df32::narrow::algorithm::gjk",desc:"",parent:'21686'},{ty:"mod",name:"minkowski_sampling",path:"ncollide2df32::narrow::algorithm",desc:"Penetration depth computation algorithm approximating the Minkowskis sum."},{ty:"fn",name:"closest_points",path:"ncollide2df32::narrow::algorithm::minkowski_sampling",desc:"Computes the closest points between two implicit inter-penetrating shapes. Returns None if the\nshapes are not in penetration. This can be used as a fallback algorithm for the GJK algorithm."},{ty:"trait",name:"CollisionDetector",path:"ncollide2df32::narrow",desc:"Trait of the algorithms executed during the so-called Narrow Phase."},{ty:"tymethod",name:"update",path:"ncollide2df32::narrow",desc:"Runs the collision detection on two objects. It is assumed that the same\ncollision detector (the same structure) is always used with the same\npair of object.",parent:'12387'},{ty:"tymethod",name:"num_colls",path:"ncollide2df32::narrow",desc:"The number of collision detected during the last update.",parent:'12387'},{ty:"tymethod",name:"colls",path:"ncollide2df32::narrow",desc:"Collects the collisions detected during the last update.",parent:'12387'},{ty:"tymethod",name:"toi",path:"ncollide2df32::narrow",desc:"Computes the time of impact of two objects.",parent:'12387'},{ty:"trait",name:"DynamicCollisionDetector",path:"ncollide2df32::narrow",desc:"Trait to be implemented by collision detector using dynamic dispatch."},{ty:"trait",name:"GeomGeomCollisionDetector",path:"ncollide2df32::narrow",desc:"Same as the `CollisionDetector` trait but using dynamic dispatch on the geometries."},{ty:"tymethod",name:"update",path:"ncollide2df32::narrow",desc:"Runs the collision detection on two objects. It is assumed that the same\ncollision detector (the same structure) is always used with the same\npair of object.",parent:'17472'},{ty:"tymethod",name:"num_colls",path:"ncollide2df32::narrow",desc:"The number of collision detected during the last update.",parent:'17472'},{ty:"tymethod",name:"colls",path:"ncollide2df32::narrow",desc:"Collects the collisions detected during the last update.",parent:'17472'},{ty:"trait",name:"CollisionDetectorFactory",path:"ncollide2df32::narrow",desc:"Trait of structures able do build a new collision detector."},{ty:"tymethod",name:"build",path:"ncollide2df32::narrow",desc:"Builds a new collision detector.",parent:'18734'},{ty:"mod",name:"broad",path:"ncollide2df32",desc:"Broad phases."},{ty:"struct",name:"NoIdDispatcher",path:"ncollide2df32::broad",desc:"Dispatcher which disallows dispatches between identical pointers."},{ty:"struct",name:"BruteForceBroadPhase",path:"ncollide2df32::broad",desc:"The broad phase which does nothing."},{ty:"struct",name:"BruteForceBoundingVolumeBroadPhase",path:"ncollide2df32::broad",desc:"Broad phase with quadratic complexity but sped up using loose bounding volumes."},{ty:"struct",name:"BoundingVolumeProxy",path:"ncollide2df32::broad",desc:"Association of an object with its loose bounding volume."},{ty:"structfield",name:"bounding_volume",path:"ncollide2df32::broad",desc:"The objects loose bounding volume.",parent:'23493'},{ty:"structfield",name:"body",path:"ncollide2df32::broad",desc:"The object.",parent:'23493'},{ty:"struct",name:"DBVTBroadPhase",path:"ncollide2df32::broad",desc:"Broad phase based on a Dynamic Bounding Volume Tree."},{ty:"trait",name:"BroadPhase",path:"ncollide2df32::broad",desc:"Trait all broad phase must implement."},{ty:"tymethod",name:"add",path:"ncollide2df32::broad",desc:"Adds an element to this broad phase.",parent:'23035'},{ty:"tymethod",name:"remove",path:"ncollide2df32::broad",desc:"Removes an element from this broad phase.",parent:'23035'},{ty:"tymethod",name:"update",path:"ncollide2df32::broad",desc:"Updates the collision pairs based on the objects bounding volumes.",parent:'23035'},{ty:"tymethod",name:"update_object",path:"ncollide2df32::broad",desc:"Updates the collision pairs involving one specific object.",parent:'23035'},{ty:"trait",name:"InterferencesBroadPhase",path:"ncollide2df32::broad",desc:"Broad phase which check for pairwise interferences."},{ty:"tymethod",name:"activate",path:"ncollide2df32::broad",desc:"Marks and object as active.",parent:'23071'},{ty:"tymethod",name:"deactivate",path:"ncollide2df32::broad",desc:"Marks and object as inactive.",parent:'23071'},{ty:"tymethod",name:"for_each_pair",path:"ncollide2df32::broad",desc:"Execute a function on each interference detected by the broad phase.",parent:'23071'},{ty:"tymethod",name:"for_each_pair_mut",path:"ncollide2df32::broad",desc:"Execute a function on each interference detected by the broad phase.",parent:'23071'},{ty:"trait",name:"BoundingVolumeBroadPhase",path:"ncollide2df32::broad",desc:"Trait of broad phases working with bounding volume."},{ty:"tymethod",name:"interferences_with_bounding_volume",path:"ncollide2df32::broad",desc:"Collects every object which might intersect a given bounding volume.",parent:'23164'},{ty:"trait",name:"RayCastBroadPhase",path:"ncollide2df32::broad",desc:"Traits of broad phase able to run fast ray-cast queries."},{ty:"tymethod",name:"interferences_with_ray",path:"ncollide2df32::broad",desc:"Collects every object which might intersect a ray.",parent:'23187'},{ty:"trait",name:"Dispatcher",path:"ncollide2df32::broad",desc:"Trait of dispatcher."},{ty:"tymethod",name:"dispatch",path:"ncollide2df32::broad",desc:"Deduce the narrow phase from two bodies.",parent:'23211'},{ty:"tymethod",name:"is_valid",path:"ncollide2df32::broad",desc:"Tells whether a collision between two bodies can occur.",parent:'23211'},{ty:"mod",name:"contact",path:"ncollide2df32",desc:"Main data structure for contacts."},{ty:"struct",name:"Contact",path:"ncollide2df32::contact",desc:"Geometric description of a contact."},{ty:"structfield",name:"world1",path:"ncollide2df32::contact",desc:"Position of the contact on the first object. The position is expressed in world space.",parent:'26105'},{ty:"structfield",name:"world2",path:"ncollide2df32::contact",desc:"Position of the contact on the second object. The position is expressed in world space.",parent:'26105'},{ty:"structfield",name:"normal",path:"ncollide2df32::contact",desc:"Contact normal",parent:'26105'},{ty:"structfield",name:"depth",path:"ncollide2df32::contact",desc:"Penetration depth",parent:'26105'},{ty:"method",name:"decode",path:"ncollide2df32::contact",desc:"",parent:'26105'},{ty:"method",name:"encode",path:"ncollide2df32::contact",desc:"",parent:'26105'},{ty:"method",name:"clone",path:"ncollide2df32::contact",desc:"",parent:'26105'},{ty:"method",name:"eq",path:"ncollide2df32::contact",desc:"",parent:'26105'},{ty:"method",name:"ne",path:"ncollide2df32::contact",desc:"",parent:'26105'},{ty:"method",name:"fmt",path:"ncollide2df32::contact",desc:"",parent:'26105'},{ty:"method",name:"new",path:"ncollide2df32::contact",desc:"Creates a new contact.",parent:'26105'},{ty:"method",name:"flip",path:"ncollide2df32::contact",desc:"Reverts the contact normal and swaps `world1` and `world2`.",parent:'26105'},{ty:"mod",name:"volumetric",path:"ncollide2df32",desc:"Volume and inertia tensor computation."},{ty:"fn",name:"ball_volume",path:"ncollide2df32::volumetric",desc:"Computes the volume of a ball."},{ty:"fn",name:"box_volume",path:"ncollide2df32::volumetric",desc:"Computes the volume of a box."},{ty:"fn",name:"cone_volume",path:"ncollide2df32::volumetric",desc:"Computes the volume of a cone."},{ty:"fn",name:"capsule_volume",path:"ncollide2df32::volumetric",desc:"Computes the volume of a capsule."},{ty:"fn",name:"cylinder_volume",path:"ncollide2df32::volumetric",desc:"Computes the volume of a cylinder."},{ty:"trait",name:"Volumetric",path:"ncollide2df32::volumetric",desc:"Trait to be implemented by objects which have a mass, a center of mass, and an inverse\ninertia tensor."},{ty:"tymethod",name:"mass_properties",path:"ncollide2df32::volumetric",desc:"Given a density, this computes the mass, center of mass, and inertia tensor of this object.",parent:'26749'},{ty:"trait",name:"InertiaTensor",path:"ncollide2df32::volumetric",desc:"Trait to be implemented by inertia tensors."},{ty:"tymethod",name:"apply",path:"ncollide2df32::volumetric",desc:"Applies this inertia tensor to a vector.",parent:'26710'},{ty:"tymethod",name:"to_world_space",path:"ncollide2df32::volumetric",desc:"Transforms this inertia tensor from local space to world space.",parent:'26710'},{ty:"tymethod",name:"to_relative_wrt_point",path:"ncollide2df32::volumetric",desc:"Computes this inertia tensor relative to a given point.",parent:'26710'},{ty:"mod",name:"implicit",path:"ncollide2df32",desc:"Definition of support functions."},{ty:"fn",name:"cso_support_point",path:"ncollide2df32::implicit",desc:"Computes the support point of a CSO on a given direction."},{ty:"fn",name:"cso_support_point_without_margin",path:"ncollide2df32::implicit",desc:"Computes the support point of a CSO on a given direction."},{ty:"trait",name:"Implicit",path:"ncollide2df32::implicit",desc:"Traits of convex geometries representable by a support mapping function."},{ty:"method",name:"support_point",path:"ncollide2df32::implicit",desc:"Evaluates the support function of the object. A support function is a\nfunction associating a vector to the geometry point which maximizes their\ndot product.\n \n# Arguments:\n * `dir` - the input of the support function. It is not required for it to\n           be normalized.",parent:'27790'},{ty:"tymethod",name:"support_point_without_margin",path:"ncollide2df32::implicit",desc:"Evaluates the support function of the object. A support function is a\nfunction associating a vector to the geometry point which maximizes their\ndot product. This does not include the `margin` of the object. Margins are\ngeometry-dependent. Use `support_point` to sample the complete geometry.\n \n# Arguments:\n * `dir` - the input of the support function. It is not required for it to\n           be normalized.",parent:'27790'},{ty:"trait",name:"HasMargin",path:"ncollide2df32::implicit",desc:"Trait of geometries having a margin."},{ty:"tymethod",name:"margin",path:"ncollide2df32::implicit",desc:"The geometry margin.",parent:'27767'},{ty:"trait",name:"PreferedSamplingDirections",path:"ncollide2df32::implicit",desc:"Trait of geometries having prefered sampling directions for the Minkowski sampling algorithm."},{ty:"tymethod",name:"sample",path:"ncollide2df32::implicit",desc:"Applies a function to this geometry with a given transform.",parent:'27933'},{ty:"mod",name:"partitioning",path:"ncollide2df32",desc:"Spatial partitioning tools."},{ty:"struct",name:"DBVT",path:"ncollide2df32::partitioning",desc:"A Dynamic Bounding Volume Tree."},{ty:"struct",name:"DBVTLeaf",path:"ncollide2df32::partitioning",desc:"Leaf of a Dynamic Bounding Volume Tree."},{ty:"structfield",name:"bounding_volume",path:"ncollide2df32::partitioning",desc:"The bounding volume of this node.",parent:'30447'},{ty:"structfield",name:"center",path:"ncollide2df32::partitioning",desc:"The center of this node bounding volume.",parent:'30447'},{ty:"structfield",name:"object",path:"ncollide2df32::partitioning",desc:"An user-defined object.",parent:'30447'},{ty:"structfield",name:"parent",path:"ncollide2df32::partitioning",desc:"This node parent.",parent:'30447'},{ty:"struct",name:"BVT",path:"ncollide2df32::partitioning",desc:"AÂ Boundig Volume Tree."},{ty:"struct",name:"RayInterferencesCollector",path:"ncollide2df32::partitioning",desc:"Bounding Volume Tree visitor collecting interferences with a given ray."},{ty:"struct",name:"BoundingVolumeInterferencesCollector",path:"ncollide2df32::partitioning",desc:"Bounding Volume Tree visitor collecting interferences with a given bounding volume."},{ty:"enum",name:"DBVTLeafState",path:"ncollide2df32::partitioning",desc:"State of a leaf."},{ty:"enum",name:"BinaryPartition",path:"ncollide2df32::partitioning",desc:"Result of a binary partitioning."},{ty:"variant",name:"Part",path:"ncollide2df32::partitioning",desc:"Result of the partitioning of one element.",parent:'32287'},{ty:"variant",name:"Parts",path:"ncollide2df32::partitioning",desc:"Result of the partitioning of several elements.",parent:'32287'},{ty:"fn",name:"kdtree_partitioner",path:"ncollide2df32::partitioning",desc:"Construction function for a kdree."},{ty:"trait",name:"BVTVisitor",path:"ncollide2df32::partitioning",desc:"Visitor of Bounding Volume Trees."},{ty:"tymethod",name:"visit_internal",path:"ncollide2df32::partitioning",desc:"Visits an internal node. Returns `true` if the internal node children have to be visited\ntoo.",parent:'33429'},{ty:"tymethod",name:"visit_leaf",path:"ncollide2df32::partitioning",desc:"Visits a leaf.",parent:'33429'},{ty:"method",name:"visit_internal_mut",path:"ncollide2df32::partitioning",desc:"Visits an internal node. Returns `true` if the internal node children have to be visited\ntoo.",parent:'33429'},{ty:"method",name:"visit_leaf_mut",path:"ncollide2df32::partitioning",desc:"Visits a leaf.",parent:'33429'},{ty:"mod",name:"util",path:"ncollide2df32",desc:"Data structure utilities.\nData structure utilities."},{ty:"mod",name:"pair",path:"ncollide2df32::util",desc:"Hashable pair of objects implementing `HasUid`."},{ty:"struct",name:"Pair",path:"ncollide2df32::util::pair",desc:"An unordered pair of elements implementing `HasUid`."},{ty:"structfield",name:"first",path:"ncollide2df32::util::pair",desc:"first object of the pair",parent:'33735'},{ty:"structfield",name:"second",path:"ncollide2df32::util::pair",desc:"second object of the pair",parent:'33735'},{ty:"struct",name:"PairTWHash",path:"ncollide2df32::util::pair",desc:"Tomas Wang based hash function for a `Pair` object."},{ty:"method",name:"decode",path:"ncollide2df32::util::pair",desc:"",parent:'33735'},{ty:"method",name:"encode",path:"ncollide2df32::util::pair",desc:"",parent:'33735'},{ty:"method",name:"clone",path:"ncollide2df32::util::pair",desc:"",parent:'33735'},{ty:"method",name:"new",path:"ncollide2df32::util::pair",desc:"Builds a new `Pair`.",parent:'33735'},{ty:"method",name:"eq",path:"ncollide2df32::util::pair",desc:"",parent:'33735'},{ty:"method",name:"decode",path:"ncollide2df32::util::pair",desc:"",parent:'34070'},{ty:"method",name:"encode",path:"ncollide2df32::util::pair",desc:"",parent:'34070'},{ty:"method",name:"new",path:"ncollide2df32::util::pair",desc:"Creates a new PairTWHash",parent:'34070'},{ty:"method",name:"hash",path:"ncollide2df32::util::pair",desc:"",parent:'34070'},{ty:"mod",name:"hash",path:"ncollide2df32::util",desc:"Trait for hash functions."},{ty:"struct",name:"UintPairTWHash",path:"ncollide2df32::util::hash",desc:"Hash function for pairs of `uint`, using the Tomas Wang hash."},{ty:"struct",name:"UintTWHash",path:"ncollide2df32::util::hash",desc:"Hash function for `uint`."},{ty:"fn",name:"key_from_pair",path:"ncollide2df32::util::hash",desc:"Combines two `uint` on a single one."},{ty:"fn",name:"tomas_wang_hash",path:"ncollide2df32::util::hash",desc:"Tomas Wang integer hash function."},{ty:"trait",name:"HashFun",path:"ncollide2df32::util::hash",desc:"Hash function."},{ty:"tymethod",name:"hash",path:"ncollide2df32::util::hash",desc:"Hash function.",parent:'34208'},{ty:"method",name:"decode",path:"ncollide2df32::util::hash",desc:"",parent:'34221'},{ty:"method",name:"encode",path:"ncollide2df32::util::hash",desc:"",parent:'34221'},{ty:"method",name:"clone",path:"ncollide2df32::util::hash",desc:"",parent:'34221'},{ty:"method",name:"new",path:"ncollide2df32::util::hash",desc:"Creates a new UintPairTWHash.",parent:'34221'},{ty:"method",name:"hash",path:"ncollide2df32::util::hash",desc:"",parent:'34221'},{ty:"method",name:"decode",path:"ncollide2df32::util::hash",desc:"",parent:'34401'},{ty:"method",name:"encode",path:"ncollide2df32::util::hash",desc:"",parent:'34401'},{ty:"method",name:"clone",path:"ncollide2df32::util::hash",desc:"",parent:'34401'},{ty:"method",name:"new",path:"ncollide2df32::util::hash",desc:"Creates a new UintTWHash.",parent:'34401'},{ty:"method",name:"hash",path:"ncollide2df32::util::hash",desc:"",parent:'34401'},{ty:"mod",name:"hash_map",path:"ncollide2df32::util",desc:"An hash map with a customizable hash function."},{ty:"struct",name:"Entry",path:"ncollide2df32::util::hash_map",desc:"Entry of an `HashMap`."},{ty:"structfield",name:"key",path:"ncollide2df32::util::hash_map",desc:"The key of the entry.",parent:'34664'},{ty:"structfield",name:"value",path:"ncollide2df32::util::hash_map",desc:"The value of the entry.",parent:'34664'},{ty:"struct",name:"HashMap",path:"ncollide2df32::util::hash_map",desc:"Alternative implementation of `HashMap`."},{ty:"method",name:"decode",path:"ncollide2df32::util::hash_map",desc:"",parent:'34664'},{ty:"method",name:"encode",path:"ncollide2df32::util::hash_map",desc:"",parent:'34664'},{ty:"method",name:"clone",path:"ncollide2df32::util::hash_map",desc:"",parent:'34664'},{ty:"method",name:"decode",path:"ncollide2df32::util::hash_map",desc:"",parent:'34888'},{ty:"method",name:"encode",path:"ncollide2df32::util::hash_map",desc:"",parent:'34888'},{ty:"method",name:"clone",path:"ncollide2df32::util::hash_map",desc:"",parent:'34888'},{ty:"method",name:"new",path:"ncollide2df32::util::hash_map",desc:"Creates a new hash map.",parent:'34888'},{ty:"method",name:"new_with_capacity",path:"ncollide2df32::util::hash_map",desc:"Creates a new hash map with a given capacity.",parent:'34888'},{ty:"method",name:"elements",path:"ncollide2df32::util::hash_map",desc:"The elements added to this hash map.",parent:'34888'},{ty:"method",name:"elements_mut",path:"ncollide2df32::util::hash_map",desc:"The elements added to this hash map.",parent:'34888'},{ty:"method",name:"remove_elem_at",path:"ncollide2df32::util::hash_map",desc:"Removes the element at the specified position of the element array.",parent:'34888'},{ty:"method",name:"get_and_remove",path:"ncollide2df32::util::hash_map",desc:"Removes an element and returns its value if it existed.",parent:'34888'},{ty:"method",name:"find_or_insert_lazy",path:"ncollide2df32::util::hash_map",desc:"Same as `self.insert_or_replace(key, value, false)` but with `value` a function which is\ncalled iff. the value does not exist yet.",parent:'34888'},{ty:"method",name:"insert_or_replace",path:"ncollide2df32::util::hash_map",desc:"Inserts or replace an element.",parent:'34888'},{ty:"method",name:"len",path:"ncollide2df32::util::hash_map",desc:"",parent:'34888'},{ty:"method",name:"clear",path:"ncollide2df32::util::hash_map",desc:"",parent:'34888'},{ty:"method",name:"contains_key",path:"ncollide2df32::util::hash_map",desc:"",parent:'34888'},{ty:"method",name:"find",path:"ncollide2df32::util::hash_map",desc:"",parent:'34888'},{ty:"method",name:"insert",path:"ncollide2df32::util::hash_map",desc:"Inserts an element on the hash map.",parent:'34888'},{ty:"method",name:"remove",path:"ncollide2df32::util::hash_map",desc:"Remove an element from the hash map.",parent:'34888'},{ty:"method",name:"find_mut",path:"ncollide2df32::util::hash_map",desc:"Gets a mutable reference to an element of the hashmap.",parent:'34888'},{ty:"mod",name:"owned_allocation_cache",path:"ncollide2df32::util",desc:"Allocation cache for owned objects."},{ty:"struct",name:"OwnedAllocationCache",path:"ncollide2df32::util::owned_allocation_cache",desc:"Cache for owned objects."},{ty:"method",name:"new",path:"ncollide2df32::util::owned_allocation_cache",desc:"Initializes the cache.",parent:'36657'},{ty:"method",name:"alloc",path:"ncollide2df32::util::owned_allocation_cache",desc:"Box a value into a potentially already allocated box.",parent:'36657'},{ty:"method",name:"retain",path:"ncollide2df32::util::owned_allocation_cache",desc:"Retains a box which can be re-used by the `box` method.",parent:'36657'},{ty:"method",name:"clear",path:"ncollide2df32::util::owned_allocation_cache",desc:"Clears the cache, destroying any stored pointer.",parent:'36657'},{ty:"mod",name:"has_uid",path:"ncollide2df32::util",desc:"Objects with an unique identifier."},{ty:"trait",name:"HasUid",path:"ncollide2df32::util::has_uid",desc:"Trait of objects having an unique identifier."},{ty:"tymethod",name:"uid",path:"ncollide2df32::util::has_uid",desc:"An unique identifier. It should be O(1).",parent:'36747'},{ty:"mod",name:"math",path:"ncollide2df32",desc:"Compilation flags dependent aliases for mathematical types."},{ty:"typedef",name:"Scalar",path:"ncollide2df32::math",desc:"The scalar type."},{ty:"typedef",name:"Vector",path:"ncollide2df32::math",desc:"The vector type."},{ty:"typedef",name:"Orientation",path:"ncollide2df32::math",desc:"The orientation type."},{ty:"typedef",name:"Matrix",path:"ncollide2df32::math",desc:"The transformation matrix type."},{ty:"typedef",name:"AngularInertia",path:"ncollide2df32::math",desc:"The inertia tensor type."}];var allPaths = {'1321':{type:'trait',name:'HasBoundingVolume'},'27716':{type:'mod',name:'volumetric_segment'},'13244':{type:'fn',name:'toi'},'8375':{type:'typedef',name:'MeshPrimitive'},'4398':{type:'struct',name:'Cylinder'},'24332':{type:'mod',name:'dbvt_broad_phase'},'27427':{type:'mod',name:'volumetric_compound'},'1535':{type:'mod',name:'aabb_cylinder'},'32287':{type:'enum',name:'BinaryPartition'},'24365':{type:'struct',name:'DBVTBroadPhase'},'2367':{type:'mod',name:'plane'},'6592':{type:'struct',name:'Reflection'},'3212':{type:'mod',name:'capsule'},'5006':{type:'struct',name:'Convex'},'26749':{type:'trait',name:'Volumetric'},'18798':{type:'mod',name:'simplex'},'23247':{type:'struct',name:'NoIdDispatcher'},'34658':{type:'mod',name:'hash_map'},'26938':{type:'mod',name:'volumetric_cylinder'},'17810':{type:'struct',name:'GeomGeomDispatcher'},'9825':{type:'fn',name:'plane_toi_with_ray'},'12346':{type:'mod',name:'narrow'},'18801':{type:'trait',name:'Simplex'},'18891':{type:'struct',name:'JohnsonSimplex'},'29734':{type:'mod',name:'dbvt'},'2058':{type:'mod',name:'ball'},'12474':{type:'mod',name:'empty'},'22098':{type:'fn',name:'closest_points_without_margin'},'14171':{type:'mod',name:'implicit_implicit'},'23307':{type:'mod',name:'brute_force_broad_phase'},'36893':{type:'typedef',name:'Scalar'},'0':{type:'mod',name:'ncollide2df32'},'5000':{type:'mod',name:'convex'},'11803':{type:'mod',name:'ray_triangle'},'12482':{type:'struct',name:'Empty'},'27379':{type:'fn',name:'capsule_volume'},'27933':{type:'trait',name:'PreferedSamplingDirections'},'17387':{type:'struct',name:'GeomConcaveGeomFactory'},'1658':{type:'mod',name:'aabb_compound'},'36911':{type:'typedef',name:'AngularInertia'},'1487':{type:'fn',name:'ball_aabb'},'12380':{type:'mod',name:'collision_detector'},'12372':{type:'mod',name:'collide'},'18957':{type:'struct',name:'RecursionTemplate'},'26840':{type:'fn',name:'ball_volume'},'2693':{type:'mod',name:'box_geom'},'8320':{type:'mod',name:'mesh'},'4394':{type:'mod',name:'cylinder'},'27078':{type:'mod',name:'volumetric_box'},'34221':{type:'struct',name:'UintPairTWHash'},'27369':{type:'mod',name:'volumetric_capsule'},'21691':{type:'enum',name:'GJKResult'},'23211':{type:'trait',name:'Dispatcher'},'17428':{type:'mod',name:'geom_geom'},'33730':{type:'mod',name:'pair'},'34569':{type:'fn',name:'tomas_wang_hash'},'13050':{type:'fn',name:'collide'},'16311':{type:'mod',name:'one_shot_contact_manifold_generator'},'33728':{type:'mod',name:'util'},'23017':{type:'mod',name:'broad'},'23493':{type:'struct',name:'BoundingVolumeProxy'},'12377':{type:'mod',name:'closest_points'},'10135':{type:'fn',name:'ball_toi_with_ray'},'29020':{type:'mod',name:'implicit_triangle'},'22452':{type:'fn',name:'project_origin_with_max_dist'},'12211':{type:'mod',name:'ray_bvt'},'1476':{type:'mod',name:'aabb_ball'},'31716':{type:'mod',name:'bvt'},'27664':{type:'mod',name:'volumetric_triangle'},'36657':{type:'struct',name:'OwnedAllocationCache'},'33423':{type:'mod',name:'bvt_visitor'},'23315':{type:'struct',name:'BruteForceBroadPhase'},'23476':{type:'mod',name:'brute_force_bounding_volume_broad_phase'},'36740':{type:'mod',name:'has_uid'},'27627':{type:'mod',name:'volumetric_mesh'},'33735':{type:'struct',name:'Pair'},'27753':{type:'mod',name:'implicit'},'33599':{type:'struct',name:'BoundingVolumeInterferencesCollector'},'18866':{type:'mod',name:'johnson_simplex'},'15302':{type:'struct',name:'IncrementalContactManifoldGenerator'},'33493':{type:'struct',name:'RayInterferencesCollector'},'1448':{type:'mod',name:'aabb_cone'},'22640':{type:'mod',name:'minkowski_sampling'},'3215':{type:'struct',name:'Capsule'},'29586':{type:'fn',name:'cso_support_point'},'13323':{type:'struct',name:'PlaneImplicit'},'39':{type:'trait',name:'HasAABB'},'10270':{type:'mod',name:'ray_box'},'34208':{type:'trait',name:'HashFun'},'27790':{type:'trait',name:'Implicit'},'6752':{type:'struct',name:'Compound'},'11110':{type:'fn',name:'implicit_toi_and_normal_with_ray'},'33035':{type:'fn',name:'kdtree_partitioner'},'9814':{type:'mod',name:'ray_plane'},'23032':{type:'mod',name:'broad_phase'},'51':{type:'struct',name:'AABB'},'22293':{type:'fn',name:'project_origin'},'28922':{type:'mod',name:'implicit_reflection'},'6590':{type:'mod',name:'reflection'},'18734':{type:'trait',name:'CollisionDetectorFactory'},'9309':{type:'mod',name:'ray'},'6736':{type:'mod',name:'compound'},'16754':{type:'struct',name:'ConcaveGeomGeom'},'26105':{type:'struct',name:'Contact'},'23187':{type:'trait',name:'RayCastBroadPhase'},'12076':{type:'mod',name:'ray_mesh'},'5113':{type:'mod',name:'minkowski_sum'},'29653':{type:'fn',name:'cso_support_point_without_margin'},'22188':{type:'fn',name:'closest_points_without_margin_with_max_dist'},'26710':{type:'trait',name:'InertiaTensor'},'13656':{type:'struct',name:'ImplicitPlane'},'11849':{type:'mod',name:'ray_concave'},'27767':{type:'trait',name:'HasMargin'},'1773':{type:'mod',name:'aabb_segment'},'32308':{type:'enum',name:'BinaryPartition'},'23035':{type:'trait',name:'BroadPhase'},'1563':{type:'mod',name:'aabb_capsule'},'34548':{type:'fn',name:'key_from_pair'},'33429':{type:'trait',name:'BVTVisitor'},'14204':{type:'struct',name:'ImplicitImplicit'},'21686':{type:'enum',name:'GJKResult'},'21992':{type:'fn',name:'closest_points'},'26690':{type:'mod',name:'volumetric'},'27556':{type:'mod',name:'volumetric_convex'},'36886':{type:'mod',name:'math'},'2371':{type:'struct',name:'Plane'},'23616':{type:'struct',name:'BruteForceBoundingVolumeBroadPhase'},'29181':{type:'mod',name:'implicit_segment'},'17210':{type:'struct',name:'GeomConcaveGeom'},'8346':{type:'trait',name:'MeshElement'},'9318':{type:'mod',name:'ray'},'12387':{type:'trait',name:'CollisionDetector'},'1854':{type:'trait',name:'ConcaveGeom'},'27954':{type:'mod',name:'implicit_box'},'1745':{type:'mod',name:'aabb_triangle'},'27590':{type:'mod',name:'volumetric_plane'},'11080':{type:'mod',name:'ray_implicit'},'14004':{type:'fn',name:'collide'},'7151':{type:'mod',name:'segment'},'34205':{type:'mod',name:'hash'},'1395':{type:'mod',name:'aabb_box'},'14105':{type:'fn',name:'toi'},'21669':{type:'mod',name:'gjk'},'31734':{type:'struct',name:'BVT'},'26099':{type:'mod',name:'contact'},'28355':{type:'mod',name:'implicit_cone'},'21695':{type:'enum',name:'GJKResult'},'36901':{type:'typedef',name:'Orientation'},'7158':{type:'struct',name:'Segment'},'1039':{type:'struct',name:'WithAABB'},'26948':{type:'fn',name:'cylinder_volume'},'9986':{type:'mod',name:'ray_ball'},'27762':{type:'mod',name:'implicit'},'1842':{type:'trait',name:'Geom'},'8208':{type:'struct',name:'GeomWithMargin'},'12734':{type:'mod',name:'ball_ball'},'7648':{type:'struct',name:'Triangle'},'17521':{type:'trait',name:'DynamicCollisionDetector'},'16733':{type:'mod',name:'concave_geom_geom'},'1801':{type:'mod',name:'geom'},'3792':{type:'struct',name:'Cone'},'27260':{type:'fn',name:'cone_volume'},'27089':{type:'fn',name:'box_volume'},'23164':{type:'trait',name:'BoundingVolumeBroadPhase'},'36906':{type:'typedef',name:'Matrix'},'12749':{type:'struct',name:'BallBall'},'1591':{type:'mod',name:'aabb_plane'},'16323':{type:'struct',name:'OneShotContactManifoldGenerator'},'28762':{type:'mod',name:'implicit_convex'},'36747':{type:'trait',name:'HasUid'},'29720':{type:'mod',name:'partitioning'},'919':{type:'fn',name:'implicit_shape_aabb'},'34664':{type:'struct',name:'Entry'},'9327':{type:'struct',name:'Ray'},'13306':{type:'mod',name:'plane_implicit'},'18796':{type:'mod',name:'algorithm'},'26700':{type:'mod',name:'volumetric'},'2701':{type:'struct',name:'Box'},'28144':{type:'mod',name:'implicit_ball'},'23071':{type:'trait',name:'InterferencesBroadPhase'},'29896':{type:'struct',name:'DBVT'},'2061':{type:'struct',name:'Ball'},'34888':{type:'struct',name:'HashMap'},'21':{type:'mod',name:'aabb'},'17346':{type:'struct',name:'ConcaveGeomGeomFactory'},'8378':{type:'struct',name:'Mesh'},'22658':{type:'fn',name:'closest_points'},'27250':{type:'mod',name:'volumetric_cone'},'1318':{type:'mod',name:'bounding_volume'},'9593':{type:'struct',name:'RayIntersection'},'13182':{type:'fn',name:'closest_points'},'1826':{type:'mod',name:'geom'},'1330':{type:'trait',name:'BoundingVolume'},'8199':{type:'mod',name:'geom_with_margin'},'10396':{type:'mod',name:'ray_aabb'},'12367':{type:'mod',name:'toi'},'28572':{type:'mod',name:'implicit_cylinder'},'34070':{type:'struct',name:'PairTWHash'},'1374':{type:'trait',name:'LooseBoundingVolume'},'34401':{type:'struct',name:'UintTWHash'},'3788':{type:'mod',name:'cone'},'36896':{type:'typedef',name:'Vector'},'5450':{type:'struct',name:'AnnotatedMinkowskiSum'},'30325':{type:'enum',name:'DBVTLeafState'},'36655':{type:'mod',name:'owned_allocation_cache'},'30447':{type:'struct',name:'DBVTLeaf'},'15015':{type:'mod',name:'incremental_contact_manifold_generator'},'23209':{type:'mod',name:'dispatcher'},'9':{type:'mod',name:'bounding_volume'},'5155':{type:'struct',name:'MinkowskiSum'},'29301':{type:'mod',name:'implicit_minkowski_sum'},'26828':{type:'mod',name:'volumetric_ball'},'17472':{type:'trait',name:'GeomGeomCollisionDetector'},'1630':{type:'mod',name:'aabb_convex'},'7641':{type:'mod',name:'triangle'},'14683':{type:'fn',name:'collide'},'14944':{type:'fn',name:'toi'},'32291':{type:'enum',name:'BinaryPartition'},'28227':{type:'mod',name:'implicit_capsule'},'21687':{type:'enum',name:'GJKResult'},'9618':{type:'trait',name:'RayCast'}};